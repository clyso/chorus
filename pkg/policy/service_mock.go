// Code generated by mockery v2.52.4. DO NOT EDIT.

package policy

import (
	context "context"

	tasks "github.com/clyso/chorus/pkg/tasks"
	mock "github.com/stretchr/testify/mock"

	time "time"
)

// MockService is an autogenerated mock type for the Service type
type MockService struct {
	mock.Mock
}

// AddBucketReplicationPolicy provides a mock function with given fields: ctx, user, bucket, from, to, toBucket, priority, agentURL
func (_m *MockService) AddBucketReplicationPolicy(ctx context.Context, user string, bucket string, from string, to string, toBucket *string, priority tasks.Priority, agentURL *string) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket, priority, agentURL)

	if len(ret) == 0 {
		panic("no return value specified for AddBucketReplicationPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string, tasks.Priority, *string) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket, priority, agentURL)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddRoutingBlock provides a mock function with given fields: ctx, storage, bucket
func (_m *MockService) AddRoutingBlock(ctx context.Context, storage string, bucket string) error {
	ret := _m.Called(ctx, storage, bucket)

	if len(ret) == 0 {
		panic("no return value specified for AddRoutingBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, storage, bucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserReplicationPolicy provides a mock function with given fields: ctx, user, from, to, priority
func (_m *MockService) AddUserReplicationPolicy(ctx context.Context, user string, from string, to string, priority tasks.Priority) error {
	ret := _m.Called(ctx, user, from, to, priority)

	if len(ret) == 0 {
		panic("no return value specified for AddUserReplicationPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, tasks.Priority) error); ok {
		r0 = rf(ctx, user, from, to, priority)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// AddUserRoutingPolicy provides a mock function with given fields: ctx, user, toStorage
func (_m *MockService) AddUserRoutingPolicy(ctx context.Context, user string, toStorage string) error {
	ret := _m.Called(ctx, user, toStorage)

	if len(ret) == 0 {
		panic("no return value specified for AddUserRoutingPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, user, toStorage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// CompleteReplicationSwitchWithDowntime provides a mock function with given fields: ctx, replID, continueReplication
func (_m *MockService) CompleteReplicationSwitchWithDowntime(ctx context.Context, replID ReplicationID, continueReplication bool) error {
	ret := _m.Called(ctx, replID, continueReplication)

	if len(ret) == 0 {
		panic("no return value specified for CompleteReplicationSwitchWithDowntime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ReplicationID, bool) error); ok {
		r0 = rf(ctx, replID, continueReplication)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteBucketReplicationsByUser provides a mock function with given fields: ctx, user, from, to
func (_m *MockService) DeleteBucketReplicationsByUser(ctx context.Context, user string, from string, to string) ([]string, error) {
	ret := _m.Called(ctx, user, from, to)

	if len(ret) == 0 {
		panic("no return value specified for DeleteBucketReplicationsByUser")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) ([]string, error)); ok {
		return rf(ctx, user, from, to)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) []string); ok {
		r0 = rf(ctx, user, from, to)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, user, from, to)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteReplication provides a mock function with given fields: ctx, user, bucket, from, to, toBucket
func (_m *MockService) DeleteReplication(ctx context.Context, user string, bucket string, from string, to string, toBucket *string) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteReplicationSwitchWithDowntime provides a mock function with given fields: ctx, replID
func (_m *MockService) DeleteReplicationSwitchWithDowntime(ctx context.Context, replID ReplicationID) error {
	ret := _m.Called(ctx, replID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteReplicationSwitchWithDowntime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ReplicationID) error); ok {
		r0 = rf(ctx, replID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteRoutingBlock provides a mock function with given fields: ctx, storage, bucket
func (_m *MockService) DeleteRoutingBlock(ctx context.Context, storage string, bucket string) error {
	ret := _m.Called(ctx, storage, bucket)

	if len(ret) == 0 {
		panic("no return value specified for DeleteRoutingBlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, storage, bucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteUserReplication provides a mock function with given fields: ctx, user, from, to
func (_m *MockService) DeleteUserReplication(ctx context.Context, user string, from string, to string) error {
	ret := _m.Called(ctx, user, from, to)

	if len(ret) == 0 {
		panic("no return value specified for DeleteUserReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, user, from, to)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DoReplicationSwitch provides a mock function with given fields: ctx, user, bucket, newMain
func (_m *MockService) DoReplicationSwitch(ctx context.Context, user string, bucket string, newMain string) error {
	ret := _m.Called(ctx, user, bucket, newMain)

	if len(ret) == 0 {
		panic("no return value specified for DoReplicationSwitch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, user, bucket, newMain)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetBucketReplicationPolicies provides a mock function with given fields: ctx, user, bucket
func (_m *MockService) GetBucketReplicationPolicies(ctx context.Context, user string, bucket string) (ReplicationPolicies, error) {
	ret := _m.Called(ctx, user, bucket)

	if len(ret) == 0 {
		panic("no return value specified for GetBucketReplicationPolicies")
	}

	var r0 ReplicationPolicies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (ReplicationPolicies, error)); ok {
		return rf(ctx, user, bucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ReplicationPolicies); ok {
		r0 = rf(ctx, user, bucket)
	} else {
		r0 = ret.Get(0).(ReplicationPolicies)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationPolicyInfo provides a mock function with given fields: ctx, user, bucket, from, to, toBucket
func (_m *MockService) GetReplicationPolicyInfo(ctx context.Context, user string, bucket string, from string, to string, toBucket *string) (ReplicationPolicyStatus, error) {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationPolicyInfo")
	}

	var r0 ReplicationPolicyStatus
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) (ReplicationPolicyStatus, error)); ok {
		return rf(ctx, user, bucket, from, to, toBucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) ReplicationPolicyStatus); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r0 = ret.Get(0).(ReplicationPolicyStatus)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *string) error); ok {
		r1 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationSwitch provides a mock function with given fields: ctx, user, bucket
func (_m *MockService) GetReplicationSwitch(ctx context.Context, user string, bucket string) (ReplicationSwitch, error) {
	ret := _m.Called(ctx, user, bucket)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationSwitch")
	}

	var r0 ReplicationSwitch
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (ReplicationSwitch, error)); ok {
		return rf(ctx, user, bucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) ReplicationSwitch); ok {
		r0 = rf(ctx, user, bucket)
	} else {
		r0 = ret.Get(0).(ReplicationSwitch)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetReplicationSwitchWithDowntime provides a mock function with given fields: ctx, replID
func (_m *MockService) GetReplicationSwitchWithDowntime(ctx context.Context, replID ReplicationID) (SwitchWithDowntime, error) {
	ret := _m.Called(ctx, replID)

	if len(ret) == 0 {
		panic("no return value specified for GetReplicationSwitchWithDowntime")
	}

	var r0 SwitchWithDowntime
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, ReplicationID) (SwitchWithDowntime, error)); ok {
		return rf(ctx, replID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, ReplicationID) SwitchWithDowntime); ok {
		r0 = rf(ctx, replID)
	} else {
		r0 = ret.Get(0).(SwitchWithDowntime)
	}

	if rf, ok := ret.Get(1).(func(context.Context, ReplicationID) error); ok {
		r1 = rf(ctx, replID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetRoutingPolicy provides a mock function with given fields: ctx, user, bucket
func (_m *MockService) GetRoutingPolicy(ctx context.Context, user string, bucket string) (string, error) {
	ret := _m.Called(ctx, user, bucket)

	if len(ret) == 0 {
		panic("no return value specified for GetRoutingPolicy")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, user, bucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, user, bucket)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserReplicationPolicies provides a mock function with given fields: ctx, user
func (_m *MockService) GetUserReplicationPolicies(ctx context.Context, user string) (ReplicationPolicies, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserReplicationPolicies")
	}

	var r0 ReplicationPolicies
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (ReplicationPolicies, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) ReplicationPolicies); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(ReplicationPolicies)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetUserRoutingPolicy provides a mock function with given fields: ctx, user
func (_m *MockService) GetUserRoutingPolicy(ctx context.Context, user string) (string, error) {
	ret := _m.Called(ctx, user)

	if len(ret) == 0 {
		panic("no return value specified for GetUserRoutingPolicy")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, user)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, user)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, user)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IncReplEvents provides a mock function with given fields: ctx, user, bucket, from, to, toBucket, eventTime
func (_m *MockService) IncReplEvents(ctx context.Context, user string, bucket string, from string, to string, toBucket *string, eventTime time.Time) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket, eventTime)

	if len(ret) == 0 {
		panic("no return value specified for IncReplEvents")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string, time.Time) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket, eventTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncReplEventsDone provides a mock function with given fields: ctx, user, bucket, from, to, toBucket, eventTime
func (_m *MockService) IncReplEventsDone(ctx context.Context, user string, bucket string, from string, to string, toBucket *string, eventTime time.Time) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket, eventTime)

	if len(ret) == 0 {
		panic("no return value specified for IncReplEventsDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string, time.Time) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket, eventTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncReplInitObjDone provides a mock function with given fields: ctx, user, bucket, from, to, toBucket, bytes, eventTime
func (_m *MockService) IncReplInitObjDone(ctx context.Context, user string, bucket string, from string, to string, toBucket *string, bytes int64, eventTime time.Time) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket, bytes, eventTime)

	if len(ret) == 0 {
		panic("no return value specified for IncReplInitObjDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string, int64, time.Time) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket, bytes, eventTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IncReplInitObjListed provides a mock function with given fields: ctx, user, bucket, from, to, toBucket, bytes, eventTime
func (_m *MockService) IncReplInitObjListed(ctx context.Context, user string, bucket string, from string, to string, toBucket *string, bytes int64, eventTime time.Time) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket, bytes, eventTime)

	if len(ret) == 0 {
		panic("no return value specified for IncReplInitObjListed")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string, int64, time.Time) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket, bytes, eventTime)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// IsReplicationPolicyExists provides a mock function with given fields: ctx, user, bucket, from, to, toBucket
func (_m *MockService) IsReplicationPolicyExists(ctx context.Context, user string, bucket string, from string, to string, toBucket *string) (bool, error) {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket)

	if len(ret) == 0 {
		panic("no return value specified for IsReplicationPolicyExists")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) (bool, error)); ok {
		return rf(ctx, user, bucket, from, to, toBucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) bool); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *string) error); ok {
		r1 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsReplicationPolicyPaused provides a mock function with given fields: ctx, user, bucket, from, to, toBucket
func (_m *MockService) IsReplicationPolicyPaused(ctx context.Context, user string, bucket string, from string, to string, toBucket *string) (bool, error) {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket)

	if len(ret) == 0 {
		panic("no return value specified for IsReplicationPolicyPaused")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) (bool, error)); ok {
		return rf(ctx, user, bucket, from, to, toBucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) bool); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string, string, *string) error); ok {
		r1 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// IsReplicationSwitchInProgress provides a mock function with given fields: ctx, user, bucket
func (_m *MockService) IsReplicationSwitchInProgress(ctx context.Context, user string, bucket string) (bool, error) {
	ret := _m.Called(ctx, user, bucket)

	if len(ret) == 0 {
		panic("no return value specified for IsReplicationSwitchInProgress")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, user, bucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, user, bucket)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ListReplicationPolicyInfo provides a mock function with given fields: ctx
func (_m *MockService) ListReplicationPolicyInfo(ctx context.Context) ([]ReplicationPolicyStatusExtended, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ListReplicationPolicyInfo")
	}

	var r0 []ReplicationPolicyStatusExtended
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) ([]ReplicationPolicyStatusExtended, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) []ReplicationPolicyStatusExtended); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]ReplicationPolicyStatusExtended)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// ObjListStarted provides a mock function with given fields: ctx, user, bucket, from, to, toBucket
func (_m *MockService) ObjListStarted(ctx context.Context, user string, bucket string, from string, to string, toBucket *string) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket)

	if len(ret) == 0 {
		panic("no return value specified for ObjListStarted")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// PauseReplication provides a mock function with given fields: ctx, user, bucket, from, to, toBucket
func (_m *MockService) PauseReplication(ctx context.Context, user string, bucket string, from string, to string, toBucket *string) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket)

	if len(ret) == 0 {
		panic("no return value specified for PauseReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ReplicationSwitchDone provides a mock function with given fields: ctx, user, bucket
func (_m *MockService) ReplicationSwitchDone(ctx context.Context, user string, bucket string) error {
	ret := _m.Called(ctx, user, bucket)

	if len(ret) == 0 {
		panic("no return value specified for ReplicationSwitchDone")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, user, bucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// ResumeReplication provides a mock function with given fields: ctx, user, bucket, from, to, toBucket
func (_m *MockService) ResumeReplication(ctx context.Context, user string, bucket string, from string, to string, toBucket *string) error {
	ret := _m.Called(ctx, user, bucket, from, to, toBucket)

	if len(ret) == 0 {
		panic("no return value specified for ResumeReplication")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string, string, *string) error); ok {
		r0 = rf(ctx, user, bucket, from, to, toBucket)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SetReplicationSwitchWithDowntime provides a mock function with given fields: ctx, replID, downtimeWindow
func (_m *MockService) SetReplicationSwitchWithDowntime(ctx context.Context, replID ReplicationID, downtimeWindow *Window) error {
	ret := _m.Called(ctx, replID, downtimeWindow)

	if len(ret) == 0 {
		panic("no return value specified for SetReplicationSwitchWithDowntime")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ReplicationID, *Window) error); ok {
		r0 = rf(ctx, replID, downtimeWindow)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateSwitchWithDowntimeStatus provides a mock function with given fields: ctx, replID, newStatus, description, startedAt, doneAt
func (_m *MockService) UpdateSwitchWithDowntimeStatus(ctx context.Context, replID ReplicationID, newStatus SwitchWithDowntimeStatus, description string, startedAt *time.Time, doneAt *time.Time) error {
	ret := _m.Called(ctx, replID, newStatus, description, startedAt, doneAt)

	if len(ret) == 0 {
		panic("no return value specified for UpdateSwitchWithDowntimeStatus")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, ReplicationID, SwitchWithDowntimeStatus, string, *time.Time, *time.Time) error); ok {
		r0 = rf(ctx, replID, newStatus, description, startedAt, doneAt)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// addBucketRoutingPolicy provides a mock function with given fields: ctx, user, bucket, toStorage
func (_m *MockService) addBucketRoutingPolicy(ctx context.Context, user string, bucket string, toStorage string) error {
	ret := _m.Called(ctx, user, bucket, toStorage)

	if len(ret) == 0 {
		panic("no return value specified for addBucketRoutingPolicy")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) error); ok {
		r0 = rf(ctx, user, bucket, toStorage)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// getBucketRoutingPolicy provides a mock function with given fields: ctx, user, bucket
func (_m *MockService) getBucketRoutingPolicy(ctx context.Context, user string, bucket string) (string, error) {
	ret := _m.Called(ctx, user, bucket)

	if len(ret) == 0 {
		panic("no return value specified for getBucketRoutingPolicy")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (string, error)); ok {
		return rf(ctx, user, bucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) string); ok {
		r0 = rf(ctx, user, bucket)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, user, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// isRoutingBlocked provides a mock function with given fields: ctx, storage, bucket
func (_m *MockService) isRoutingBlocked(ctx context.Context, storage string, bucket string) (bool, error) {
	ret := _m.Called(ctx, storage, bucket)

	if len(ret) == 0 {
		panic("no return value specified for isRoutingBlocked")
	}

	var r0 bool
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (bool, error)); ok {
		return rf(ctx, storage, bucket)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) bool); ok {
		r0 = rf(ctx, storage, bucket)
	} else {
		r0 = ret.Get(0).(bool)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, storage, bucket)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewMockService creates a new instance of MockService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockService {
	mock := &MockService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
