{
  "swagger": "2.0",
  "info": {
    "title": "chorus/chorus.proto",
    "version": "version not set"
  },
  "tags": [
    {
      "name": "Chorus"
    }
  ],
  "consumes": [
    "application/json"
  ],
  "produces": [
    "application/json"
  ],
  "paths": {
    "/agents": {
      "get": {
        "operationId": "Chorus_GetAgents",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusGetAgentsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      }
    },
    "/consistency/delete": {
      "put": {
        "operationId": "Chorus_DeleteConsistencyCheckReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusConsistencyCheckRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/consistency/list": {
      "get": {
        "operationId": "Chorus_ListConsistencyChecks",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusListConsistencyChecksResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      }
    },
    "/consistency/report": {
      "get": {
        "operationId": "Chorus_GetConsistencyCheckReport",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusGetConsistencyCheckReportResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      }
    },
    "/consistency/report-entries": {
      "get": {
        "operationId": "Chorus_GetConsistencyCheckReportEntries",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusGetConsistencyCheckReportEntriesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "Cursor",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "uint64"
          },
          {
            "name": "PageSize",
            "in": "query",
            "required": false,
            "type": "string",
            "format": "int64"
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/consistency/start": {
      "post": {
        "operationId": "Chorus_StartConsistencyCheck",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusConsistencyCheckRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/proxy": {
      "get": {
        "summary": "Returns connection details for proxy s3 endpoint",
        "operationId": "Chorus_GetProxyCredentials",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusGetProxyCredentialsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication": {
      "get": {
        "summary": "Lists configured replications with statuses",
        "operationId": "Chorus_ListReplications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusListReplicationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/add": {
      "post": {
        "summary": "Configures new replication for user or bucket(-s)",
        "operationId": "Chorus_AddReplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusAddReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/compare-bucket": {
      "post": {
        "summary": "Compares contents of given bucket in given storages",
        "operationId": "Chorus_CompareBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusCompareBucketResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusCompareBucketRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/delete": {
      "put": {
        "summary": "Deletes given replication",
        "operationId": "Chorus_DeleteReplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/get": {
      "post": {
        "operationId": "Chorus_GetReplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusReplication"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/list-buckets": {
      "post": {
        "summary": "Returns list of buckets to configure new replication.",
        "operationId": "Chorus_ListBucketsForReplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusListBucketsForReplicationResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusListBucketsForReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/pause": {
      "put": {
        "summary": "Pauses given replication",
        "operationId": "Chorus_PauseReplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/resume": {
      "put": {
        "summary": "Resumes given replication",
        "operationId": "Chorus_ResumeReplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/switch": {
      "get": {
        "summary": "returns list of all switches",
        "operationId": "Chorus_ListReplicationSwitches",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusListSwitchResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      },
      "post": {
        "summary": "Switch main\u003c-\u003efollower for selected replication with downtime.\nThis method Can also be used to update existing switch if it has not started yet.\nWorkflow: stops write requests to bucket on chorus proxy until all replication tasks will be processed.\nThen it checks if main and follower bucket contents are the same, unblocks writes, and routes all requests to follower bucket. If bucket contents are different, switch will be aborted and writes will be unblocked. Downtime Switch can be aborted or reverted without risk of data loss.\nMethod will return error in following cases:\n  - there is no existing bucket replication\n  - there are multiple replications from the same main bucket to multiple followers\n  - switch is in progress - aka writes already blocked. Use DeleteBucketSwitch in this case.\n  - switch is successfully finished\n  - replication is to different bucket name. Will be supported later.",
        "operationId": "Chorus_SwitchBucket",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusSwitchBucketRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/switch/delete": {
      "post": {
        "summary": "Deletes Switch with following implications:\n!!!Use with caution for ZeroDowntime switch.\n- If switch was in not_started, error, or skipped state, it will not be attempted anymore.\n  proxy will route all requests to old bucket.\n- If switch was in progress, it will be aborted. For downtime switch, bucket block will be removed\n  proxy will route all requests to old bucket, no data will be lost.\n  !!!For ZeroDowntime switch, routing will be reverted back to old bucket.\n  Old and new buckets may end up in inconsistent state because all object writes happened\n  since start of no_downtime migration were routed only to new bucket.\n- If switch was done. Only switch metadata will be removed, replication or routing will not be affected.",
        "operationId": "Chorus_DeleteBucketSwitch",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/switch/status": {
      "post": {
        "summary": "Returns Switch status",
        "operationId": "Chorus_GetBucketSwitchStatus",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusGetBucketSwitchStatusResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/switch/zero-downtime": {
      "post": {
        "summary": "Switch main\u003c-\u003efollower for selected replication without downtime.\nSwitch will be started immediately. It will route all writes to new main bucket and resolve reads to bucket with the latest data without blocking. When all replication tasks will be processed, switch will be completed and all reads and writes will be routed to new bucket. Unlike switch with downtime, switch without downtime is not checking bucket contents on completion and cannot be aborted or reverted without risk of data loss.\nMethod will return error in following cases:\n  - there is no existing bucket replication\n  - there are multiple replications from the same main bucket to multiple followers\n  - switch already exists. Zero downtime switch cannot be updated. Use DeleteBucketSwitch in this case.\n  - replication is to different bucket name. Will be supported later.",
        "operationId": "Chorus_SwitchBucketZeroDowntime",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusSwitchBucketZeroDowntimeRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/user": {
      "get": {
        "operationId": "Chorus_ListUserReplications",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusListUserReplicationsResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      }
    },
    "/replication/user/delete": {
      "put": {
        "operationId": "Chorus_DeleteUserReplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusDeleteUserReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/storage": {
      "get": {
        "summary": "Lists configured storages with users",
        "operationId": "Chorus_GetStorages",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusGetStoragesResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      }
    },
    "/v2/replication/add": {
      "post": {
        "operationId": "Chorus_AddBucketReplication",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "type": "object",
              "properties": {}
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "parameters": [
          {
            "name": "body",
            "in": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/chorusAddBucketReplicationRequest"
            }
          }
        ],
        "tags": [
          "Chorus"
        ]
      }
    },
    "/version": {
      "get": {
        "summary": "Get app version",
        "operationId": "Chorus_GetAppVersion",
        "responses": {
          "200": {
            "description": "A successful response.",
            "schema": {
              "$ref": "#/definitions/chorusGetAppVersionResponse"
            }
          },
          "default": {
            "description": "An unexpected error response.",
            "schema": {
              "$ref": "#/definitions/googlerpcStatus"
            }
          }
        },
        "tags": [
          "Chorus"
        ]
      }
    }
  },
  "definitions": {
    "StorageProvider": {
      "type": "string",
      "enum": [
        "Other",
        "Ceph",
        "Minio",
        "AWS",
        "GCS",
        "Alibaba",
        "Cloudflare",
        "DigitalOcean"
      ],
      "default": "Other"
    },
    "chorusAddBucketReplicationRequest": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string",
          "title": "s3 user alias from chorus config"
        },
        "fromStorage": {
          "type": "string",
          "title": "source storage alias from chorus config"
        },
        "fromBucket": {
          "type": "string",
          "title": "source bucket name"
        },
        "toStorage": {
          "type": "string",
          "description": "destination storage name from chorus config. Can be equal to destination storage if destination bucket name is different from source."
        },
        "toBucket": {
          "type": "string",
          "title": "custom destination bucket name. if not set, destination bucket name will be equal to source bucket"
        },
        "agentUrl": {
          "type": "string",
          "description": "webhook URL of chorus agent. Required if chorus agent setup is used."
        }
      }
    },
    "chorusAddReplicationRequest": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "buckets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "isForAllBuckets": {
          "type": "boolean"
        },
        "agentUrl": {
          "type": "string"
        },
        "toBucket": {
          "type": "string"
        }
      }
    },
    "chorusAgent": {
      "type": "object",
      "properties": {
        "storage": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "chorusCompareBucketRequest": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "showMatch": {
          "type": "boolean",
          "title": "set true to get list of matching files (match) in response"
        },
        "toBucket": {
          "type": "string"
        }
      }
    },
    "chorusCompareBucketResponse": {
      "type": "object",
      "properties": {
        "isMatch": {
          "type": "boolean",
          "title": "true if storage's buckets have the same content"
        },
        "missFrom": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of missing files in 'from storage' bucket"
        },
        "missTo": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of missing files in 'to storage' bucket"
        },
        "differ": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of files with different content"
        },
        "error": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "list of errors occurred during comparison"
        },
        "match": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "list matched files in storages bucket.\nwill be empty if request parameter show_match set to false."
        }
      }
    },
    "chorusConsistencyCheck": {
      "type": "object",
      "properties": {
        "id": {
          "type": "string"
        },
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusMigrateLocation"
          }
        },
        "queued": {
          "type": "string",
          "format": "uint64"
        },
        "completed": {
          "type": "string",
          "format": "uint64"
        },
        "ready": {
          "type": "boolean"
        },
        "consistent": {
          "type": "boolean"
        }
      }
    },
    "chorusConsistencyCheckReportEntry": {
      "type": "object",
      "properties": {
        "object": {
          "type": "string"
        },
        "etag": {
          "type": "string"
        },
        "storages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "chorusConsistencyCheckRequest": {
      "type": "object",
      "properties": {
        "locations": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusMigrateLocation"
          }
        }
      }
    },
    "chorusCredential": {
      "type": "object",
      "properties": {
        "alias": {
          "type": "string"
        },
        "accessKey": {
          "type": "string"
        },
        "secretKey": {
          "type": "string"
        }
      }
    },
    "chorusDeleteUserReplicationRequest": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "deleteBucketReplications": {
          "type": "boolean"
        }
      }
    },
    "chorusGetAgentsResponse": {
      "type": "object",
      "properties": {
        "agents": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusAgent"
          }
        }
      }
    },
    "chorusGetAppVersionResponse": {
      "type": "object",
      "properties": {
        "version": {
          "type": "string"
        },
        "commit": {
          "type": "string"
        },
        "date": {
          "type": "string"
        }
      }
    },
    "chorusGetBucketSwitchStatusResponse": {
      "type": "object",
      "properties": {
        "lastStatus": {
          "$ref": "#/definitions/chorusGetBucketSwitchStatusResponseStatus",
          "title": "Current switch status"
        },
        "zeroDowntime": {
          "type": "boolean",
          "title": "true if switch is zero downtime"
        },
        "multipartTtl": {
          "type": "string",
          "title": "multipart uploads TTL for zero downtime switch"
        },
        "downtimeOpts": {
          "$ref": "#/definitions/chorusSwitchDowntimeOpts"
        },
        "lastStartedAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time of last switch attempt - last time when switch was moved to InProgress status."
        },
        "doneAt": {
          "type": "string",
          "format": "date-time",
          "description": "Time of last switch completion. Set only if switch status is Done."
        },
        "history": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "title": "History of switch status changes"
        },
        "replicationId": {
          "$ref": "#/definitions/chorusReplicationRequest"
        }
      }
    },
    "chorusGetBucketSwitchStatusResponseStatus": {
      "type": "string",
      "enum": [
        "NotStarted",
        "InProgress",
        "CheckInProgress",
        "Error",
        "Skipped",
        "Done"
      ],
      "default": "NotStarted",
      "description": " - NotStarted: Switch is not started yet\n - InProgress: Switch is in progress. Draining replication events queue.\nFor switch with downtime, writes to bucket are blocked at this point.\n - CheckInProgress: Switch is in progress. Queue is drained. Checking if main and follower buckets are the same.\nWrites to bucket are still blocked. Used only for switch with downtime.\n - Error: Switch failed to complete in downtime window and was aborted.\nWrites to bucket are unblocked. Used only for switch with downtime.\nIf cron downtime_window is used, switch will be retried on next cron execution.\n - Skipped: Switch was not able to start in given downtime window because conditions were not met.\nUsed only for switch with downtime. If cron downtime_window is used, switch will be retried on next cron execution.\n - Done: Switch was successfully completed.\nAll data was replicated to new main bucket and all read and write requests are now routed to it."
    },
    "chorusGetConsistencyCheckReportEntriesResponse": {
      "type": "object",
      "properties": {
        "entries": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusConsistencyCheckReportEntry"
          }
        },
        "Cursor": {
          "type": "string",
          "format": "uint64"
        }
      }
    },
    "chorusGetConsistencyCheckReportResponse": {
      "type": "object",
      "properties": {
        "check": {
          "$ref": "#/definitions/chorusConsistencyCheck"
        }
      }
    },
    "chorusGetProxyCredentialsResponse": {
      "type": "object",
      "properties": {
        "address": {
          "type": "string"
        },
        "credentials": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusCredential"
          }
        }
      }
    },
    "chorusGetStoragesResponse": {
      "type": "object",
      "properties": {
        "storages": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusStorage"
          }
        }
      }
    },
    "chorusListBucketsForReplicationRequest": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "showReplicated": {
          "type": "boolean"
        }
      }
    },
    "chorusListBucketsForReplicationResponse": {
      "type": "object",
      "properties": {
        "buckets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "replicatedBuckets": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "chorusListConsistencyChecksResponse": {
      "type": "object",
      "properties": {
        "checks": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusConsistencyCheck"
          }
        }
      }
    },
    "chorusListReplicationsResponse": {
      "type": "object",
      "properties": {
        "replications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusReplication"
          }
        }
      }
    },
    "chorusListSwitchResponse": {
      "type": "object",
      "properties": {
        "switches": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusGetBucketSwitchStatusResponse"
          }
        }
      }
    },
    "chorusListUserReplicationsResponse": {
      "type": "object",
      "properties": {
        "replications": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusUserReplication"
          }
        }
      }
    },
    "chorusMigrateLocation": {
      "type": "object",
      "properties": {
        "storage": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "user": {
          "type": "string"
        }
      }
    },
    "chorusReplication": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "createdAt": {
          "type": "string",
          "format": "date-time"
        },
        "isPaused": {
          "type": "boolean"
        },
        "isInitDone": {
          "type": "boolean"
        },
        "initObjListed": {
          "type": "string",
          "format": "int64"
        },
        "initObjDone": {
          "type": "string",
          "format": "int64"
        },
        "initBytesListed": {
          "type": "string",
          "format": "int64"
        },
        "initBytesDone": {
          "type": "string",
          "format": "int64"
        },
        "events": {
          "type": "string",
          "format": "int64"
        },
        "eventsDone": {
          "type": "string",
          "format": "int64"
        },
        "lastEmittedAt": {
          "type": "string",
          "format": "date-time"
        },
        "lastProcessedAt": {
          "type": "string",
          "format": "date-time"
        },
        "agentUrl": {
          "type": "string"
        },
        "toBucket": {
          "type": "string"
        },
        "initDoneAt": {
          "type": "string",
          "format": "date-time"
        },
        "hasSwitch": {
          "type": "boolean",
          "description": "true if given replication has associated replication switch with it."
        },
        "isArchived": {
          "type": "boolean",
          "description": "true if replication is archived. Archived replication will not generate or sync new events.\nThe main purpose of archived replication is to keep replication metadata for future reference.\nArchived replication can be safely deleted."
        },
        "archivedAt": {
          "type": "string",
          "format": "date-time"
        }
      }
    },
    "chorusReplicationRequest": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "bucket": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        },
        "toBucket": {
          "type": "string"
        }
      }
    },
    "chorusStorage": {
      "type": "object",
      "properties": {
        "name": {
          "type": "string",
          "title": "some human-readable alias for storage config"
        },
        "isMain": {
          "type": "boolean"
        },
        "address": {
          "type": "string",
          "title": "ex: s3.clyso.com"
        },
        "provider": {
          "$ref": "#/definitions/StorageProvider",
          "title": "s3 storage provider \u003cCeph|Minio|AWS|Other\u003e"
        },
        "credentials": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/chorusCredential"
          },
          "title": "credentials: access key (public, aka username)"
        }
      }
    },
    "chorusSwitchBucketRequest": {
      "type": "object",
      "properties": {
        "replicationId": {
          "$ref": "#/definitions/chorusReplicationRequest",
          "description": "Id of bucket replication policy to switch source and destination buckets on proxy.\nReplication policy should already exist."
        },
        "downtimeOpts": {
          "$ref": "#/definitions/chorusSwitchDowntimeOpts",
          "description": "Configures downtime window for switch. During downtime bucket writes will be blocked on proxy.\nIf NOT set, switch will be performed right away and writes will be blocked until it is done."
        }
      }
    },
    "chorusSwitchBucketZeroDowntimeRequest": {
      "type": "object",
      "properties": {
        "replicationId": {
          "$ref": "#/definitions/chorusReplicationRequest",
          "description": "Id of bucket replication policy to switch source and destination buckets on proxy.\nReplication policy should already exist."
        },
        "multipartTtl": {
          "type": "string",
          "description": "Max Amount of time to wait for uncompleted multipart uploads to finish before switching buckets.\nDefault is 1 hour."
        }
      }
    },
    "chorusSwitchDowntimeOpts": {
      "type": "object",
      "properties": {
        "startOnInitDone": {
          "type": "boolean",
          "title": "If true, chorus will perform switch automatically when initial migration will be done.\nInitial migration copies all objects that existed in source bucket before replication started.\ndefault is false"
        },
        "cron": {
          "type": "string",
          "description": "If set, chorus will try or retry to execute switch according to CRON schedule until it will be done.\nBucket check and draining work queue is time consuming operation\nso in most cases it is not makes sense to set cron frequency less than one hour\nor less than max_duration if used.\nEither cron or start_at can be set, but not both. If both are set, an error will be returned."
        },
        "startAt": {
          "type": "string",
          "format": "date-time",
          "description": "If set, switch will be executed at given time.\nIf at this point initial migration will not be done, switch will be marked as failed and not executed.\nEither cron or start_at can be set, but not both. If both are set, an error will be returned."
        },
        "maxDuration": {
          "type": "string",
          "description": "If set, chorus will abort switch if it will not be able to complete in given time.\nIn this case, chorus will unblock bucket writes and keep old main as main.\nSwitch will be marked as failed and will be retried on next cron execution if set."
        },
        "maxEventLag": {
          "type": "integer",
          "format": "int64",
          "description": "If set, switch execution will be skipped if number of unprocessed events is more than max_event_lag.\nSwitch will be marked as failed and will be retried on next cron execution if set."
        },
        "skipBucketCheck": {
          "type": "boolean",
          "description": "if true, chorus will not perform equality check of bucket contents before completing switch with downtime.\nMight be useful for buckets with large number of objects. In this case check will consume a lot of time and memory in Redis.\nDefault is false."
        },
        "continueReplication": {
          "type": "boolean",
          "description": "Set true to replicate data updates from new main to old main bucket after successful switch\nDefault is false."
        }
      },
      "description": "Defines downtime window for replication switch with downtime.\nAll dates and times depends on local times of machine running chorus worker.\nTime precision is ~1 minute."
    },
    "chorusUserReplication": {
      "type": "object",
      "properties": {
        "user": {
          "type": "string"
        },
        "from": {
          "type": "string"
        },
        "to": {
          "type": "string"
        }
      }
    },
    "googlerpcStatus": {
      "type": "object",
      "properties": {
        "code": {
          "type": "integer",
          "format": "int32"
        },
        "message": {
          "type": "string"
        },
        "details": {
          "type": "array",
          "items": {
            "type": "object",
            "$ref": "#/definitions/protobufAny"
          }
        }
      }
    },
    "protobufAny": {
      "type": "object",
      "properties": {
        "@type": {
          "type": "string"
        }
      },
      "additionalProperties": {}
    }
  }
}
