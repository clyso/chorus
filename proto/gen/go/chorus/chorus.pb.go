// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.36.2
// 	protoc        (unknown)
// source: chorus/chorus.proto

package pb

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	durationpb "google.golang.org/protobuf/types/known/durationpb"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Storage_Provider int32

const (
	Storage_Other        Storage_Provider = 0
	Storage_Ceph         Storage_Provider = 1
	Storage_Minio        Storage_Provider = 2
	Storage_AWS          Storage_Provider = 3
	Storage_GCS          Storage_Provider = 4
	Storage_Alibaba      Storage_Provider = 5
	Storage_Cloudflare   Storage_Provider = 6
	Storage_DigitalOcean Storage_Provider = 7
)

// Enum value maps for Storage_Provider.
var (
	Storage_Provider_name = map[int32]string{
		0: "Other",
		1: "Ceph",
		2: "Minio",
		3: "AWS",
		4: "GCS",
		5: "Alibaba",
		6: "Cloudflare",
		7: "DigitalOcean",
	}
	Storage_Provider_value = map[string]int32{
		"Other":        0,
		"Ceph":         1,
		"Minio":        2,
		"AWS":          3,
		"GCS":          4,
		"Alibaba":      5,
		"Cloudflare":   6,
		"DigitalOcean": 7,
	}
)

func (x Storage_Provider) Enum() *Storage_Provider {
	p := new(Storage_Provider)
	*p = x
	return p
}

func (x Storage_Provider) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (Storage_Provider) Descriptor() protoreflect.EnumDescriptor {
	return file_chorus_chorus_proto_enumTypes[0].Descriptor()
}

func (Storage_Provider) Type() protoreflect.EnumType {
	return &file_chorus_chorus_proto_enumTypes[0]
}

func (x Storage_Provider) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use Storage_Provider.Descriptor instead.
func (Storage_Provider) EnumDescriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{11, 0}
}

type GetBucketSwitchStatusResponse_Status int32

const (
	// Switch is not started yet
	GetBucketSwitchStatusResponse_NotStarted GetBucketSwitchStatusResponse_Status = 0
	// Switch is in progress. Draining replication events queue.
	// For switch with downtime, writes to bucket are blocked at this point.
	GetBucketSwitchStatusResponse_InProgress GetBucketSwitchStatusResponse_Status = 1
	// Switch is in progress. Queue is drained. Checking if main and follower buckets are the same.
	// Writes to bucket are still blocked. Used only for switch with downtime.
	GetBucketSwitchStatusResponse_CheckInProgress GetBucketSwitchStatusResponse_Status = 2
	// Switch failed to complete in downtime window and was aborted.
	// Writes to bucket are unblocked. Used only for switch with downtime.
	// If cron downtime_window is used, switch will be retried on next cron execution.
	GetBucketSwitchStatusResponse_Error GetBucketSwitchStatusResponse_Status = 3
	// Switch was not able to start in given downtime window because conditions were not met.
	// Used only for switch with downtime. If cron downtime_window is used, switch will be retried on next cron execution.
	GetBucketSwitchStatusResponse_Skipped GetBucketSwitchStatusResponse_Status = 4
	// Switch was successfully completed.
	// All data was replicated to new main bucket and all read and write requests are now routed to it.
	GetBucketSwitchStatusResponse_Done GetBucketSwitchStatusResponse_Status = 5
)

// Enum value maps for GetBucketSwitchStatusResponse_Status.
var (
	GetBucketSwitchStatusResponse_Status_name = map[int32]string{
		0: "NotStarted",
		1: "InProgress",
		2: "CheckInProgress",
		3: "Error",
		4: "Skipped",
		5: "Done",
	}
	GetBucketSwitchStatusResponse_Status_value = map[string]int32{
		"NotStarted":      0,
		"InProgress":      1,
		"CheckInProgress": 2,
		"Error":           3,
		"Skipped":         4,
		"Done":            5,
	}
)

func (x GetBucketSwitchStatusResponse_Status) Enum() *GetBucketSwitchStatusResponse_Status {
	p := new(GetBucketSwitchStatusResponse_Status)
	*p = x
	return p
}

func (x GetBucketSwitchStatusResponse_Status) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GetBucketSwitchStatusResponse_Status) Descriptor() protoreflect.EnumDescriptor {
	return file_chorus_chorus_proto_enumTypes[1].Descriptor()
}

func (GetBucketSwitchStatusResponse_Status) Type() protoreflect.EnumType {
	return &file_chorus_chorus_proto_enumTypes[1]
}

func (x GetBucketSwitchStatusResponse_Status) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GetBucketSwitchStatusResponse_Status.Descriptor instead.
func (GetBucketSwitchStatusResponse_Status) EnumDescriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{31, 0}
}

type MigrateLocation struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Storage       string                 `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Bucket        string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	User          string                 `protobuf:"bytes,3,opt,name=user,proto3" json:"user,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *MigrateLocation) Reset() {
	*x = MigrateLocation{}
	mi := &file_chorus_chorus_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *MigrateLocation) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MigrateLocation) ProtoMessage() {}

func (x *MigrateLocation) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MigrateLocation.ProtoReflect.Descriptor instead.
func (*MigrateLocation) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{0}
}

func (x *MigrateLocation) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *MigrateLocation) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *MigrateLocation) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

type ConsistencyCheckRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locations     []*MigrateLocation     `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsistencyCheckRequest) Reset() {
	*x = ConsistencyCheckRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsistencyCheckRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyCheckRequest) ProtoMessage() {}

func (x *ConsistencyCheckRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyCheckRequest.ProtoReflect.Descriptor instead.
func (*ConsistencyCheckRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{1}
}

func (x *ConsistencyCheckRequest) GetLocations() []*MigrateLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

type ConsistencyCheck struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Id            string                 `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Locations     []*MigrateLocation     `protobuf:"bytes,2,rep,name=locations,proto3" json:"locations,omitempty"`
	Queued        uint64                 `protobuf:"varint,3,opt,name=queued,proto3" json:"queued,omitempty"`
	Completed     uint64                 `protobuf:"varint,4,opt,name=completed,proto3" json:"completed,omitempty"`
	Ready         bool                   `protobuf:"varint,5,opt,name=ready,proto3" json:"ready,omitempty"`
	Consistent    bool                   `protobuf:"varint,6,opt,name=consistent,proto3" json:"consistent,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsistencyCheck) Reset() {
	*x = ConsistencyCheck{}
	mi := &file_chorus_chorus_proto_msgTypes[2]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsistencyCheck) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyCheck) ProtoMessage() {}

func (x *ConsistencyCheck) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[2]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyCheck.ProtoReflect.Descriptor instead.
func (*ConsistencyCheck) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{2}
}

func (x *ConsistencyCheck) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *ConsistencyCheck) GetLocations() []*MigrateLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *ConsistencyCheck) GetQueued() uint64 {
	if x != nil {
		return x.Queued
	}
	return 0
}

func (x *ConsistencyCheck) GetCompleted() uint64 {
	if x != nil {
		return x.Completed
	}
	return 0
}

func (x *ConsistencyCheck) GetReady() bool {
	if x != nil {
		return x.Ready
	}
	return false
}

func (x *ConsistencyCheck) GetConsistent() bool {
	if x != nil {
		return x.Consistent
	}
	return false
}

type ListConsistencyChecksResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Checks        []*ConsistencyCheck    `protobuf:"bytes,1,rep,name=checks,proto3" json:"checks,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListConsistencyChecksResponse) Reset() {
	*x = ListConsistencyChecksResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[3]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListConsistencyChecksResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListConsistencyChecksResponse) ProtoMessage() {}

func (x *ListConsistencyChecksResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[3]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListConsistencyChecksResponse.ProtoReflect.Descriptor instead.
func (*ListConsistencyChecksResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{3}
}

func (x *ListConsistencyChecksResponse) GetChecks() []*ConsistencyCheck {
	if x != nil {
		return x.Checks
	}
	return nil
}

type GetConsistencyCheckReportRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locations     []*MigrateLocation     `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsistencyCheckReportRequest) Reset() {
	*x = GetConsistencyCheckReportRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[4]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsistencyCheckReportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsistencyCheckReportRequest) ProtoMessage() {}

func (x *GetConsistencyCheckReportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[4]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsistencyCheckReportRequest.ProtoReflect.Descriptor instead.
func (*GetConsistencyCheckReportRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{4}
}

func (x *GetConsistencyCheckReportRequest) GetLocations() []*MigrateLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

type GetConsistencyCheckReportResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Check         *ConsistencyCheck      `protobuf:"bytes,1,opt,name=check,proto3" json:"check,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsistencyCheckReportResponse) Reset() {
	*x = GetConsistencyCheckReportResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[5]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsistencyCheckReportResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsistencyCheckReportResponse) ProtoMessage() {}

func (x *GetConsistencyCheckReportResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[5]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsistencyCheckReportResponse.ProtoReflect.Descriptor instead.
func (*GetConsistencyCheckReportResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{5}
}

func (x *GetConsistencyCheckReportResponse) GetCheck() *ConsistencyCheck {
	if x != nil {
		return x.Check
	}
	return nil
}

type ConsistencyCheckReportEntry struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Object        string                 `protobuf:"bytes,1,opt,name=object,proto3" json:"object,omitempty"`
	Etag          string                 `protobuf:"bytes,2,opt,name=etag,proto3" json:"etag,omitempty"`
	Storages      []string               `protobuf:"bytes,3,rep,name=storages,proto3" json:"storages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ConsistencyCheckReportEntry) Reset() {
	*x = ConsistencyCheckReportEntry{}
	mi := &file_chorus_chorus_proto_msgTypes[6]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ConsistencyCheckReportEntry) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConsistencyCheckReportEntry) ProtoMessage() {}

func (x *ConsistencyCheckReportEntry) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[6]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConsistencyCheckReportEntry.ProtoReflect.Descriptor instead.
func (*ConsistencyCheckReportEntry) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{6}
}

func (x *ConsistencyCheckReportEntry) GetObject() string {
	if x != nil {
		return x.Object
	}
	return ""
}

func (x *ConsistencyCheckReportEntry) GetEtag() string {
	if x != nil {
		return x.Etag
	}
	return ""
}

func (x *ConsistencyCheckReportEntry) GetStorages() []string {
	if x != nil {
		return x.Storages
	}
	return nil
}

type GetConsistencyCheckReportEntriesRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Locations     []*MigrateLocation     `protobuf:"bytes,1,rep,name=locations,proto3" json:"locations,omitempty"`
	Cursor        uint64                 `protobuf:"varint,2,opt,name=Cursor,proto3" json:"Cursor,omitempty"`
	PageSize      int64                  `protobuf:"varint,3,opt,name=PageSize,proto3" json:"PageSize,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsistencyCheckReportEntriesRequest) Reset() {
	*x = GetConsistencyCheckReportEntriesRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[7]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsistencyCheckReportEntriesRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsistencyCheckReportEntriesRequest) ProtoMessage() {}

func (x *GetConsistencyCheckReportEntriesRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[7]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsistencyCheckReportEntriesRequest.ProtoReflect.Descriptor instead.
func (*GetConsistencyCheckReportEntriesRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{7}
}

func (x *GetConsistencyCheckReportEntriesRequest) GetLocations() []*MigrateLocation {
	if x != nil {
		return x.Locations
	}
	return nil
}

func (x *GetConsistencyCheckReportEntriesRequest) GetCursor() uint64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

func (x *GetConsistencyCheckReportEntriesRequest) GetPageSize() int64 {
	if x != nil {
		return x.PageSize
	}
	return 0
}

type GetConsistencyCheckReportEntriesResponse struct {
	state         protoimpl.MessageState         `protogen:"open.v1"`
	Entries       []*ConsistencyCheckReportEntry `protobuf:"bytes,1,rep,name=entries,proto3" json:"entries,omitempty"`
	Cursor        uint64                         `protobuf:"varint,2,opt,name=Cursor,proto3" json:"Cursor,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetConsistencyCheckReportEntriesResponse) Reset() {
	*x = GetConsistencyCheckReportEntriesResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[8]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetConsistencyCheckReportEntriesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetConsistencyCheckReportEntriesResponse) ProtoMessage() {}

func (x *GetConsistencyCheckReportEntriesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[8]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetConsistencyCheckReportEntriesResponse.ProtoReflect.Descriptor instead.
func (*GetConsistencyCheckReportEntriesResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{8}
}

func (x *GetConsistencyCheckReportEntriesResponse) GetEntries() []*ConsistencyCheckReportEntry {
	if x != nil {
		return x.Entries
	}
	return nil
}

func (x *GetConsistencyCheckReportEntriesResponse) GetCursor() uint64 {
	if x != nil {
		return x.Cursor
	}
	return 0
}

type GetAppVersionResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Version       string                 `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Commit        string                 `protobuf:"bytes,2,opt,name=commit,proto3" json:"commit,omitempty"`
	Date          string                 `protobuf:"bytes,3,opt,name=date,proto3" json:"date,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAppVersionResponse) Reset() {
	*x = GetAppVersionResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[9]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAppVersionResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAppVersionResponse) ProtoMessage() {}

func (x *GetAppVersionResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[9]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAppVersionResponse.ProtoReflect.Descriptor instead.
func (*GetAppVersionResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{9}
}

func (x *GetAppVersionResponse) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *GetAppVersionResponse) GetCommit() string {
	if x != nil {
		return x.Commit
	}
	return ""
}

func (x *GetAppVersionResponse) GetDate() string {
	if x != nil {
		return x.Date
	}
	return ""
}

type GetStoragesResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Storages      []*Storage             `protobuf:"bytes,1,rep,name=storages,proto3" json:"storages,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetStoragesResponse) Reset() {
	*x = GetStoragesResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[10]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetStoragesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetStoragesResponse) ProtoMessage() {}

func (x *GetStoragesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[10]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetStoragesResponse.ProtoReflect.Descriptor instead.
func (*GetStoragesResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{10}
}

func (x *GetStoragesResponse) GetStorages() []*Storage {
	if x != nil {
		return x.Storages
	}
	return nil
}

type Storage struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// some human-readable alias for storage config
	Name   string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	IsMain bool   `protobuf:"varint,2,opt,name=is_main,json=isMain,proto3" json:"is_main,omitempty"`
	// ex: s3.clyso.com
	Address string `protobuf:"bytes,3,opt,name=address,proto3" json:"address,omitempty"`
	// s3 storage provider <Ceph|Minio|AWS|Other>
	Provider Storage_Provider `protobuf:"varint,4,opt,name=provider,proto3,enum=chorus.Storage_Provider" json:"provider,omitempty"`
	// credentials: access key (public, aka username)
	Credentials   []*Credential `protobuf:"bytes,5,rep,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Storage) Reset() {
	*x = Storage{}
	mi := &file_chorus_chorus_proto_msgTypes[11]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Storage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Storage) ProtoMessage() {}

func (x *Storage) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[11]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Storage.ProtoReflect.Descriptor instead.
func (*Storage) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{11}
}

func (x *Storage) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

func (x *Storage) GetIsMain() bool {
	if x != nil {
		return x.IsMain
	}
	return false
}

func (x *Storage) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Storage) GetProvider() Storage_Provider {
	if x != nil {
		return x.Provider
	}
	return Storage_Other
}

func (x *Storage) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type Credential struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Alias         string                 `protobuf:"bytes,1,opt,name=alias,proto3" json:"alias,omitempty"`
	AccessKey     string                 `protobuf:"bytes,2,opt,name=access_key,json=accessKey,proto3" json:"access_key,omitempty"`
	SecretKey     string                 `protobuf:"bytes,3,opt,name=secret_key,json=secretKey,proto3" json:"secret_key,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Credential) Reset() {
	*x = Credential{}
	mi := &file_chorus_chorus_proto_msgTypes[12]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Credential) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Credential) ProtoMessage() {}

func (x *Credential) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[12]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Credential.ProtoReflect.Descriptor instead.
func (*Credential) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{12}
}

func (x *Credential) GetAlias() string {
	if x != nil {
		return x.Alias
	}
	return ""
}

func (x *Credential) GetAccessKey() string {
	if x != nil {
		return x.AccessKey
	}
	return ""
}

func (x *Credential) GetSecretKey() string {
	if x != nil {
		return x.SecretKey
	}
	return ""
}

type GetProxyCredentialsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Address       string                 `protobuf:"bytes,1,opt,name=address,proto3" json:"address,omitempty"`
	Credentials   []*Credential          `protobuf:"bytes,2,rep,name=credentials,proto3" json:"credentials,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetProxyCredentialsResponse) Reset() {
	*x = GetProxyCredentialsResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[13]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetProxyCredentialsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetProxyCredentialsResponse) ProtoMessage() {}

func (x *GetProxyCredentialsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[13]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetProxyCredentialsResponse.ProtoReflect.Descriptor instead.
func (*GetProxyCredentialsResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{13}
}

func (x *GetProxyCredentialsResponse) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *GetProxyCredentialsResponse) GetCredentials() []*Credential {
	if x != nil {
		return x.Credentials
	}
	return nil
}

type AddReplicationRequest struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	User            string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	From            string                 `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To              string                 `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	Buckets         []string               `protobuf:"bytes,5,rep,name=buckets,proto3" json:"buckets,omitempty"`
	IsForAllBuckets bool                   `protobuf:"varint,6,opt,name=is_for_all_buckets,json=isForAllBuckets,proto3" json:"is_for_all_buckets,omitempty"`
	AgentUrl        *string                `protobuf:"bytes,7,opt,name=agent_url,json=agentUrl,proto3,oneof" json:"agent_url,omitempty"`
	ToBucket        *string                `protobuf:"bytes,8,opt,name=to_bucket,json=toBucket,proto3,oneof" json:"to_bucket,omitempty"`
	unknownFields   protoimpl.UnknownFields
	sizeCache       protoimpl.SizeCache
}

func (x *AddReplicationRequest) Reset() {
	*x = AddReplicationRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[14]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddReplicationRequest) ProtoMessage() {}

func (x *AddReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[14]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddReplicationRequest.ProtoReflect.Descriptor instead.
func (*AddReplicationRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{14}
}

func (x *AddReplicationRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AddReplicationRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *AddReplicationRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *AddReplicationRequest) GetBuckets() []string {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *AddReplicationRequest) GetIsForAllBuckets() bool {
	if x != nil {
		return x.IsForAllBuckets
	}
	return false
}

func (x *AddReplicationRequest) GetAgentUrl() string {
	if x != nil && x.AgentUrl != nil {
		return *x.AgentUrl
	}
	return ""
}

func (x *AddReplicationRequest) GetToBucket() string {
	if x != nil && x.ToBucket != nil {
		return *x.ToBucket
	}
	return ""
}

type AddBucketReplicationRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// s3 user alias from chorus config
	User string `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	// source storage alias from chorus config
	FromStorage string `protobuf:"bytes,2,opt,name=from_storage,json=fromStorage,proto3" json:"from_storage,omitempty"`
	// source bucket name
	FromBucket string `protobuf:"bytes,3,opt,name=from_bucket,json=fromBucket,proto3" json:"from_bucket,omitempty"`
	// destination storage name from chorus config. Can be equal to destination storage if destination bucket name is different from source.
	ToStorage string `protobuf:"bytes,4,opt,name=to_storage,json=toStorage,proto3" json:"to_storage,omitempty"`
	// custom destination bucket name. if not set, destination bucket name will be equal to soruce bucket
	ToBucket *string `protobuf:"bytes,5,opt,name=to_bucket,json=toBucket,proto3,oneof" json:"to_bucket,omitempty"`
	// webhook URL of chorus agent. Required if chorus agent setup is used.
	AgentUrl      *string `protobuf:"bytes,6,opt,name=agent_url,json=agentUrl,proto3,oneof" json:"agent_url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *AddBucketReplicationRequest) Reset() {
	*x = AddBucketReplicationRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[15]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *AddBucketReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AddBucketReplicationRequest) ProtoMessage() {}

func (x *AddBucketReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[15]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AddBucketReplicationRequest.ProtoReflect.Descriptor instead.
func (*AddBucketReplicationRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{15}
}

func (x *AddBucketReplicationRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *AddBucketReplicationRequest) GetFromStorage() string {
	if x != nil {
		return x.FromStorage
	}
	return ""
}

func (x *AddBucketReplicationRequest) GetFromBucket() string {
	if x != nil {
		return x.FromBucket
	}
	return ""
}

func (x *AddBucketReplicationRequest) GetToStorage() string {
	if x != nil {
		return x.ToStorage
	}
	return ""
}

func (x *AddBucketReplicationRequest) GetToBucket() string {
	if x != nil && x.ToBucket != nil {
		return *x.ToBucket
	}
	return ""
}

func (x *AddBucketReplicationRequest) GetAgentUrl() string {
	if x != nil && x.AgentUrl != nil {
		return *x.AgentUrl
	}
	return ""
}

type ListBucketsForReplicationRequest struct {
	state          protoimpl.MessageState `protogen:"open.v1"`
	User           string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	From           string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To             string                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	ShowReplicated bool                   `protobuf:"varint,4,opt,name=show_replicated,json=showReplicated,proto3" json:"show_replicated,omitempty"`
	unknownFields  protoimpl.UnknownFields
	sizeCache      protoimpl.SizeCache
}

func (x *ListBucketsForReplicationRequest) Reset() {
	*x = ListBucketsForReplicationRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[16]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBucketsForReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsForReplicationRequest) ProtoMessage() {}

func (x *ListBucketsForReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[16]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsForReplicationRequest.ProtoReflect.Descriptor instead.
func (*ListBucketsForReplicationRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{16}
}

func (x *ListBucketsForReplicationRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ListBucketsForReplicationRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ListBucketsForReplicationRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ListBucketsForReplicationRequest) GetShowReplicated() bool {
	if x != nil {
		return x.ShowReplicated
	}
	return false
}

type ListBucketsForReplicationResponse struct {
	state             protoimpl.MessageState `protogen:"open.v1"`
	Buckets           []string               `protobuf:"bytes,1,rep,name=buckets,proto3" json:"buckets,omitempty"`
	ReplicatedBuckets []string               `protobuf:"bytes,2,rep,name=replicated_buckets,json=replicatedBuckets,proto3" json:"replicated_buckets,omitempty"`
	unknownFields     protoimpl.UnknownFields
	sizeCache         protoimpl.SizeCache
}

func (x *ListBucketsForReplicationResponse) Reset() {
	*x = ListBucketsForReplicationResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[17]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListBucketsForReplicationResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListBucketsForReplicationResponse) ProtoMessage() {}

func (x *ListBucketsForReplicationResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[17]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListBucketsForReplicationResponse.ProtoReflect.Descriptor instead.
func (*ListBucketsForReplicationResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{17}
}

func (x *ListBucketsForReplicationResponse) GetBuckets() []string {
	if x != nil {
		return x.Buckets
	}
	return nil
}

func (x *ListBucketsForReplicationResponse) GetReplicatedBuckets() []string {
	if x != nil {
		return x.ReplicatedBuckets
	}
	return nil
}

type ListReplicationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Replications  []*Replication         `protobuf:"bytes,1,rep,name=replications,proto3" json:"replications,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListReplicationsResponse) Reset() {
	*x = ListReplicationsResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[18]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListReplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListReplicationsResponse) ProtoMessage() {}

func (x *ListReplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[18]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListReplicationsResponse.ProtoReflect.Descriptor instead.
func (*ListReplicationsResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{18}
}

func (x *ListReplicationsResponse) GetReplications() []*Replication {
	if x != nil {
		return x.Replications
	}
	return nil
}

type Replication struct {
	state           protoimpl.MessageState `protogen:"open.v1"`
	User            string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Bucket          string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	From            string                 `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To              string                 `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	CreatedAt       *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty"`
	IsPaused        bool                   `protobuf:"varint,6,opt,name=is_paused,json=isPaused,proto3" json:"is_paused,omitempty"`
	IsInitDone      bool                   `protobuf:"varint,7,opt,name=is_init_done,json=isInitDone,proto3" json:"is_init_done,omitempty"`
	InitObjListed   int64                  `protobuf:"varint,8,opt,name=init_obj_listed,json=initObjListed,proto3" json:"init_obj_listed,omitempty"`
	InitObjDone     int64                  `protobuf:"varint,9,opt,name=init_obj_done,json=initObjDone,proto3" json:"init_obj_done,omitempty"`
	InitBytesListed int64                  `protobuf:"varint,10,opt,name=init_bytes_listed,json=initBytesListed,proto3" json:"init_bytes_listed,omitempty"`
	InitBytesDone   int64                  `protobuf:"varint,11,opt,name=init_bytes_done,json=initBytesDone,proto3" json:"init_bytes_done,omitempty"`
	Events          int64                  `protobuf:"varint,12,opt,name=events,proto3" json:"events,omitempty"`
	EventsDone      int64                  `protobuf:"varint,13,opt,name=events_done,json=eventsDone,proto3" json:"events_done,omitempty"`
	LastEmittedAt   *timestamppb.Timestamp `protobuf:"bytes,14,opt,name=last_emitted_at,json=lastEmittedAt,proto3" json:"last_emitted_at,omitempty"`
	LastProcessedAt *timestamppb.Timestamp `protobuf:"bytes,15,opt,name=last_processed_at,json=lastProcessedAt,proto3" json:"last_processed_at,omitempty"`
	AgentUrl        *string                `protobuf:"bytes,16,opt,name=agent_url,json=agentUrl,proto3,oneof" json:"agent_url,omitempty"`
	ToBucket        *string                `protobuf:"bytes,17,opt,name=to_bucket,json=toBucket,proto3,oneof" json:"to_bucket,omitempty"`
	InitDoneAt      *timestamppb.Timestamp `protobuf:"bytes,18,opt,name=init_done_at,json=initDoneAt,proto3" json:"init_done_at,omitempty"`
	// true if given replication has associated replication switch with it.
	HasSwitch bool `protobuf:"varint,19,opt,name=has_switch,json=hasSwitch,proto3" json:"has_switch,omitempty"`
	// true if replication is archived. Archived replication will not generate or sync new events.
	// The main purpose of archived replication is to keep replication metadata for future reference.
	// Archived replication can be safely deleted.
	IsArchived    bool                   `protobuf:"varint,20,opt,name=is_archived,json=isArchived,proto3" json:"is_archived,omitempty"`
	ArchivedAt    *timestamppb.Timestamp `protobuf:"bytes,21,opt,name=archived_at,json=archivedAt,proto3" json:"archived_at,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Replication) Reset() {
	*x = Replication{}
	mi := &file_chorus_chorus_proto_msgTypes[19]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Replication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Replication) ProtoMessage() {}

func (x *Replication) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[19]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Replication.ProtoReflect.Descriptor instead.
func (*Replication) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{19}
}

func (x *Replication) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *Replication) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *Replication) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *Replication) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *Replication) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *Replication) GetIsPaused() bool {
	if x != nil {
		return x.IsPaused
	}
	return false
}

func (x *Replication) GetIsInitDone() bool {
	if x != nil {
		return x.IsInitDone
	}
	return false
}

func (x *Replication) GetInitObjListed() int64 {
	if x != nil {
		return x.InitObjListed
	}
	return 0
}

func (x *Replication) GetInitObjDone() int64 {
	if x != nil {
		return x.InitObjDone
	}
	return 0
}

func (x *Replication) GetInitBytesListed() int64 {
	if x != nil {
		return x.InitBytesListed
	}
	return 0
}

func (x *Replication) GetInitBytesDone() int64 {
	if x != nil {
		return x.InitBytesDone
	}
	return 0
}

func (x *Replication) GetEvents() int64 {
	if x != nil {
		return x.Events
	}
	return 0
}

func (x *Replication) GetEventsDone() int64 {
	if x != nil {
		return x.EventsDone
	}
	return 0
}

func (x *Replication) GetLastEmittedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastEmittedAt
	}
	return nil
}

func (x *Replication) GetLastProcessedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastProcessedAt
	}
	return nil
}

func (x *Replication) GetAgentUrl() string {
	if x != nil && x.AgentUrl != nil {
		return *x.AgentUrl
	}
	return ""
}

func (x *Replication) GetToBucket() string {
	if x != nil && x.ToBucket != nil {
		return *x.ToBucket
	}
	return ""
}

func (x *Replication) GetInitDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.InitDoneAt
	}
	return nil
}

func (x *Replication) GetHasSwitch() bool {
	if x != nil {
		return x.HasSwitch
	}
	return false
}

func (x *Replication) GetIsArchived() bool {
	if x != nil {
		return x.IsArchived
	}
	return false
}

func (x *Replication) GetArchivedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.ArchivedAt
	}
	return nil
}

type ReplicationRequest struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Bucket        string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	From          string                 `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	ToBucket      *string                `protobuf:"bytes,5,opt,name=to_bucket,json=toBucket,proto3,oneof" json:"to_bucket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ReplicationRequest) Reset() {
	*x = ReplicationRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[20]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ReplicationRequest) ProtoMessage() {}

func (x *ReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[20]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ReplicationRequest.ProtoReflect.Descriptor instead.
func (*ReplicationRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{20}
}

func (x *ReplicationRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *ReplicationRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *ReplicationRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *ReplicationRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *ReplicationRequest) GetToBucket() string {
	if x != nil && x.ToBucket != nil {
		return *x.ToBucket
	}
	return ""
}

type ListUserReplicationsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Replications  []*UserReplication     `protobuf:"bytes,1,rep,name=replications,proto3" json:"replications,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListUserReplicationsResponse) Reset() {
	*x = ListUserReplicationsResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[21]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListUserReplicationsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListUserReplicationsResponse) ProtoMessage() {}

func (x *ListUserReplicationsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[21]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListUserReplicationsResponse.ProtoReflect.Descriptor instead.
func (*ListUserReplicationsResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{21}
}

func (x *ListUserReplicationsResponse) GetReplications() []*UserReplication {
	if x != nil {
		return x.Replications
	}
	return nil
}

type UserReplication struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	User          string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	From          string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To            string                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *UserReplication) Reset() {
	*x = UserReplication{}
	mi := &file_chorus_chorus_proto_msgTypes[22]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *UserReplication) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UserReplication) ProtoMessage() {}

func (x *UserReplication) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[22]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UserReplication.ProtoReflect.Descriptor instead.
func (*UserReplication) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{22}
}

func (x *UserReplication) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *UserReplication) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *UserReplication) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

type DeleteUserReplicationRequest struct {
	state                    protoimpl.MessageState `protogen:"open.v1"`
	User                     string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	From                     string                 `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To                       string                 `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	DeleteBucketReplications bool                   `protobuf:"varint,4,opt,name=delete_bucket_replications,json=deleteBucketReplications,proto3" json:"delete_bucket_replications,omitempty"`
	unknownFields            protoimpl.UnknownFields
	sizeCache                protoimpl.SizeCache
}

func (x *DeleteUserReplicationRequest) Reset() {
	*x = DeleteUserReplicationRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[23]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *DeleteUserReplicationRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DeleteUserReplicationRequest) ProtoMessage() {}

func (x *DeleteUserReplicationRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[23]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DeleteUserReplicationRequest.ProtoReflect.Descriptor instead.
func (*DeleteUserReplicationRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{23}
}

func (x *DeleteUserReplicationRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *DeleteUserReplicationRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *DeleteUserReplicationRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *DeleteUserReplicationRequest) GetDeleteBucketReplications() bool {
	if x != nil {
		return x.DeleteBucketReplications
	}
	return false
}

type CompareBucketRequest struct {
	state  protoimpl.MessageState `protogen:"open.v1"`
	User   string                 `protobuf:"bytes,1,opt,name=user,proto3" json:"user,omitempty"`
	Bucket string                 `protobuf:"bytes,2,opt,name=bucket,proto3" json:"bucket,omitempty"`
	From   string                 `protobuf:"bytes,3,opt,name=from,proto3" json:"from,omitempty"`
	To     string                 `protobuf:"bytes,4,opt,name=to,proto3" json:"to,omitempty"`
	// set true to get list of matching files (match) in response
	ShowMatch     bool    `protobuf:"varint,5,opt,name=show_match,json=showMatch,proto3" json:"show_match,omitempty"`
	ToBucket      *string `protobuf:"bytes,6,opt,name=to_bucket,json=toBucket,proto3,oneof" json:"to_bucket,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompareBucketRequest) Reset() {
	*x = CompareBucketRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[24]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompareBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareBucketRequest) ProtoMessage() {}

func (x *CompareBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[24]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareBucketRequest.ProtoReflect.Descriptor instead.
func (*CompareBucketRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{24}
}

func (x *CompareBucketRequest) GetUser() string {
	if x != nil {
		return x.User
	}
	return ""
}

func (x *CompareBucketRequest) GetBucket() string {
	if x != nil {
		return x.Bucket
	}
	return ""
}

func (x *CompareBucketRequest) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

func (x *CompareBucketRequest) GetTo() string {
	if x != nil {
		return x.To
	}
	return ""
}

func (x *CompareBucketRequest) GetShowMatch() bool {
	if x != nil {
		return x.ShowMatch
	}
	return false
}

func (x *CompareBucketRequest) GetToBucket() string {
	if x != nil && x.ToBucket != nil {
		return *x.ToBucket
	}
	return ""
}

type CompareBucketResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// true if storage's buckets have the same content
	IsMatch bool `protobuf:"varint,1,opt,name=is_match,json=isMatch,proto3" json:"is_match,omitempty"`
	// list of missing files in 'from storage' bucket
	MissFrom []string `protobuf:"bytes,2,rep,name=miss_from,json=missFrom,proto3" json:"miss_from,omitempty"`
	// list of missing files in 'to storage' bucket
	MissTo []string `protobuf:"bytes,3,rep,name=miss_to,json=missTo,proto3" json:"miss_to,omitempty"`
	// list of files with different content
	Differ []string `protobuf:"bytes,4,rep,name=differ,proto3" json:"differ,omitempty"`
	// list of errors occurred during comparison
	Error []string `protobuf:"bytes,5,rep,name=error,proto3" json:"error,omitempty"`
	// list matched files in storages bucket.
	// will be empty if request parameter show_match set to false.
	Match         []string `protobuf:"bytes,6,rep,name=match,proto3" json:"match,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *CompareBucketResponse) Reset() {
	*x = CompareBucketResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[25]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *CompareBucketResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CompareBucketResponse) ProtoMessage() {}

func (x *CompareBucketResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[25]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CompareBucketResponse.ProtoReflect.Descriptor instead.
func (*CompareBucketResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{25}
}

func (x *CompareBucketResponse) GetIsMatch() bool {
	if x != nil {
		return x.IsMatch
	}
	return false
}

func (x *CompareBucketResponse) GetMissFrom() []string {
	if x != nil {
		return x.MissFrom
	}
	return nil
}

func (x *CompareBucketResponse) GetMissTo() []string {
	if x != nil {
		return x.MissTo
	}
	return nil
}

func (x *CompareBucketResponse) GetDiffer() []string {
	if x != nil {
		return x.Differ
	}
	return nil
}

func (x *CompareBucketResponse) GetError() []string {
	if x != nil {
		return x.Error
	}
	return nil
}

func (x *CompareBucketResponse) GetMatch() []string {
	if x != nil {
		return x.Match
	}
	return nil
}

type GetAgentsResponse struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Agents        []*Agent               `protobuf:"bytes,1,rep,name=agents,proto3" json:"agents,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetAgentsResponse) Reset() {
	*x = GetAgentsResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[26]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetAgentsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetAgentsResponse) ProtoMessage() {}

func (x *GetAgentsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[26]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetAgentsResponse.ProtoReflect.Descriptor instead.
func (*GetAgentsResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{26}
}

func (x *GetAgentsResponse) GetAgents() []*Agent {
	if x != nil {
		return x.Agents
	}
	return nil
}

type Agent struct {
	state         protoimpl.MessageState `protogen:"open.v1"`
	Storage       string                 `protobuf:"bytes,1,opt,name=storage,proto3" json:"storage,omitempty"`
	Url           string                 `protobuf:"bytes,2,opt,name=url,proto3" json:"url,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *Agent) Reset() {
	*x = Agent{}
	mi := &file_chorus_chorus_proto_msgTypes[27]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *Agent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Agent) ProtoMessage() {}

func (x *Agent) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[27]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Agent.ProtoReflect.Descriptor instead.
func (*Agent) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{27}
}

func (x *Agent) GetStorage() string {
	if x != nil {
		return x.Storage
	}
	return ""
}

func (x *Agent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

type SwitchBucketZeroDowntimeRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id of bucket replication policy to switch source and destination buckets on proxy.
	// Replication policy should already exist.
	ReplicationId *ReplicationRequest `protobuf:"bytes,1,opt,name=replication_id,json=replicationId,proto3" json:"replication_id,omitempty"`
	// Max Amount of time to wait for uncompleted multipart uploads to finish before switching buckets.
	// Default is 1 hour.
	MultipartTtl  *durationpb.Duration `protobuf:"bytes,2,opt,name=multipart_ttl,json=multipartTtl,proto3,oneof" json:"multipart_ttl,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchBucketZeroDowntimeRequest) Reset() {
	*x = SwitchBucketZeroDowntimeRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[28]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchBucketZeroDowntimeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchBucketZeroDowntimeRequest) ProtoMessage() {}

func (x *SwitchBucketZeroDowntimeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[28]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchBucketZeroDowntimeRequest.ProtoReflect.Descriptor instead.
func (*SwitchBucketZeroDowntimeRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{28}
}

func (x *SwitchBucketZeroDowntimeRequest) GetReplicationId() *ReplicationRequest {
	if x != nil {
		return x.ReplicationId
	}
	return nil
}

func (x *SwitchBucketZeroDowntimeRequest) GetMultipartTtl() *durationpb.Duration {
	if x != nil {
		return x.MultipartTtl
	}
	return nil
}

type SwitchBucketRequest struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Id of bucket replication policy to switch source and destination buckets on proxy.
	// Replication policy should already exist.
	ReplicationId *ReplicationRequest `protobuf:"bytes,1,opt,name=replication_id,json=replicationId,proto3" json:"replication_id,omitempty"`
	// Configures downtime window for switch. During downtime bucket writes will be blocked on proxy.
	// If NOT set, switch will be performed right away and writes will be blocked until it is done.
	DowntimeOpts  *SwitchDowntimeOpts `protobuf:"bytes,2,opt,name=downtime_opts,json=downtimeOpts,proto3,oneof" json:"downtime_opts,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *SwitchBucketRequest) Reset() {
	*x = SwitchBucketRequest{}
	mi := &file_chorus_chorus_proto_msgTypes[29]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchBucketRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchBucketRequest) ProtoMessage() {}

func (x *SwitchBucketRequest) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[29]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchBucketRequest.ProtoReflect.Descriptor instead.
func (*SwitchBucketRequest) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{29}
}

func (x *SwitchBucketRequest) GetReplicationId() *ReplicationRequest {
	if x != nil {
		return x.ReplicationId
	}
	return nil
}

func (x *SwitchBucketRequest) GetDowntimeOpts() *SwitchDowntimeOpts {
	if x != nil {
		return x.DowntimeOpts
	}
	return nil
}

// Defines downtime window for replication switch with downtime.
// All dates and times depends on local times of machine running chorus worker.
// Time precision is ~1 minute.
type SwitchDowntimeOpts struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// If true, chorus will perform switch automatically when initial migration will be done.
	// Initial migration copies all objects that existed in source bucket before replication started.
	// default is false
	StartOnInitDone bool `protobuf:"varint,1,opt,name=start_on_init_done,json=startOnInitDone,proto3" json:"start_on_init_done,omitempty"`
	// If set, chorus will try or retry to execute switch according to CRON schedule until it will be done.
	// Bucket check and draining work queue is time consuming operation
	// so in most cases it is not makes sense to set cron frequency less than one hour
	// or less than max_duration if used.
	// Either cron or start_at can be set, but not both. If both are set, an error will be returned.
	Cron *string `protobuf:"bytes,2,opt,name=cron,proto3,oneof" json:"cron,omitempty"`
	// If set, switch will be executed at given time.
	// If at this point initial migration will not be done, switch will be marked as failed and not executed.
	// Either cron or start_at can be set, but not both. If both are set, an error will be returned.
	StartAt *timestamppb.Timestamp `protobuf:"bytes,3,opt,name=start_at,json=startAt,proto3,oneof" json:"start_at,omitempty"`
	// If set, chorus will abort switch if it will not be able to complete in given time.
	// In this case, chorus will unblock bucket writes and keep old main as main.
	// Switch will be marked as failed and will be retried on next cron execution if set.
	MaxDuration *durationpb.Duration `protobuf:"bytes,4,opt,name=max_duration,json=maxDuration,proto3,oneof" json:"max_duration,omitempty"`
	// If set, switch execution will be skipped if number of unprocessed events is more than max_event_lag.
	// Switch will be marked as failed and will be retried on next cron execution if set.
	MaxEventLag *uint32 `protobuf:"varint,5,opt,name=max_event_lag,json=maxEventLag,proto3,oneof" json:"max_event_lag,omitempty"`
	// if true, chorus will not perform equality check of bucket contents before completing switch with downtime.
	// Might be useful for buckets with large number of objects. In this case check will consume a lot of time and memory in Redis.
	// Default is false.
	SkipBucketCheck bool `protobuf:"varint,6,opt,name=skip_bucket_check,json=skipBucketCheck,proto3" json:"skip_bucket_check,omitempty"`
	// Set true to replicate data updates from new main to old main bucket after successful switch
	// Default is false.
	ContinueReplication bool `protobuf:"varint,7,opt,name=continue_replication,json=continueReplication,proto3" json:"continue_replication,omitempty"`
	unknownFields       protoimpl.UnknownFields
	sizeCache           protoimpl.SizeCache
}

func (x *SwitchDowntimeOpts) Reset() {
	*x = SwitchDowntimeOpts{}
	mi := &file_chorus_chorus_proto_msgTypes[30]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *SwitchDowntimeOpts) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SwitchDowntimeOpts) ProtoMessage() {}

func (x *SwitchDowntimeOpts) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[30]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SwitchDowntimeOpts.ProtoReflect.Descriptor instead.
func (*SwitchDowntimeOpts) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{30}
}

func (x *SwitchDowntimeOpts) GetStartOnInitDone() bool {
	if x != nil {
		return x.StartOnInitDone
	}
	return false
}

func (x *SwitchDowntimeOpts) GetCron() string {
	if x != nil && x.Cron != nil {
		return *x.Cron
	}
	return ""
}

func (x *SwitchDowntimeOpts) GetStartAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartAt
	}
	return nil
}

func (x *SwitchDowntimeOpts) GetMaxDuration() *durationpb.Duration {
	if x != nil {
		return x.MaxDuration
	}
	return nil
}

func (x *SwitchDowntimeOpts) GetMaxEventLag() uint32 {
	if x != nil && x.MaxEventLag != nil {
		return *x.MaxEventLag
	}
	return 0
}

func (x *SwitchDowntimeOpts) GetSkipBucketCheck() bool {
	if x != nil {
		return x.SkipBucketCheck
	}
	return false
}

func (x *SwitchDowntimeOpts) GetContinueReplication() bool {
	if x != nil {
		return x.ContinueReplication
	}
	return false
}

type GetBucketSwitchStatusResponse struct {
	state protoimpl.MessageState `protogen:"open.v1"`
	// Current switch status
	LastStatus GetBucketSwitchStatusResponse_Status `protobuf:"varint,1,opt,name=last_status,json=lastStatus,proto3,enum=chorus.GetBucketSwitchStatusResponse_Status" json:"last_status,omitempty"`
	// true if switch is zero downtime
	ZeroDowntime bool `protobuf:"varint,2,opt,name=zero_downtime,json=zeroDowntime,proto3" json:"zero_downtime,omitempty"`
	// multipart uploads TTL for zero downtime switch
	MultipartTtl *durationpb.Duration `protobuf:"bytes,3,opt,name=multipart_ttl,json=multipartTtl,proto3,oneof" json:"multipart_ttl,omitempty"`
	DowntimeOpts *SwitchDowntimeOpts  `protobuf:"bytes,4,opt,name=downtime_opts,json=downtimeOpts,proto3,oneof" json:"downtime_opts,omitempty"`
	// Time of last switch attempt - last time when switch was moved to InProgress status.
	LastStartedAt *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=last_started_at,json=lastStartedAt,proto3,oneof" json:"last_started_at,omitempty"`
	// Time of last switch completion. Set only if switch status is Done.
	DoneAt *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=done_at,json=doneAt,proto3,oneof" json:"done_at,omitempty"`
	// History of switch status changes
	History       []string            `protobuf:"bytes,7,rep,name=history,proto3" json:"history,omitempty"`
	ReplicationId *ReplicationRequest `protobuf:"bytes,8,opt,name=replication_id,json=replicationId,proto3" json:"replication_id,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *GetBucketSwitchStatusResponse) Reset() {
	*x = GetBucketSwitchStatusResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[31]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *GetBucketSwitchStatusResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GetBucketSwitchStatusResponse) ProtoMessage() {}

func (x *GetBucketSwitchStatusResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[31]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GetBucketSwitchStatusResponse.ProtoReflect.Descriptor instead.
func (*GetBucketSwitchStatusResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{31}
}

func (x *GetBucketSwitchStatusResponse) GetLastStatus() GetBucketSwitchStatusResponse_Status {
	if x != nil {
		return x.LastStatus
	}
	return GetBucketSwitchStatusResponse_NotStarted
}

func (x *GetBucketSwitchStatusResponse) GetZeroDowntime() bool {
	if x != nil {
		return x.ZeroDowntime
	}
	return false
}

func (x *GetBucketSwitchStatusResponse) GetMultipartTtl() *durationpb.Duration {
	if x != nil {
		return x.MultipartTtl
	}
	return nil
}

func (x *GetBucketSwitchStatusResponse) GetDowntimeOpts() *SwitchDowntimeOpts {
	if x != nil {
		return x.DowntimeOpts
	}
	return nil
}

func (x *GetBucketSwitchStatusResponse) GetLastStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.LastStartedAt
	}
	return nil
}

func (x *GetBucketSwitchStatusResponse) GetDoneAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DoneAt
	}
	return nil
}

func (x *GetBucketSwitchStatusResponse) GetHistory() []string {
	if x != nil {
		return x.History
	}
	return nil
}

func (x *GetBucketSwitchStatusResponse) GetReplicationId() *ReplicationRequest {
	if x != nil {
		return x.ReplicationId
	}
	return nil
}

type ListSwitchResponse struct {
	state         protoimpl.MessageState           `protogen:"open.v1"`
	Switches      []*GetBucketSwitchStatusResponse `protobuf:"bytes,1,rep,name=switches,proto3" json:"switches,omitempty"`
	unknownFields protoimpl.UnknownFields
	sizeCache     protoimpl.SizeCache
}

func (x *ListSwitchResponse) Reset() {
	*x = ListSwitchResponse{}
	mi := &file_chorus_chorus_proto_msgTypes[32]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *ListSwitchResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListSwitchResponse) ProtoMessage() {}

func (x *ListSwitchResponse) ProtoReflect() protoreflect.Message {
	mi := &file_chorus_chorus_proto_msgTypes[32]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListSwitchResponse.ProtoReflect.Descriptor instead.
func (*ListSwitchResponse) Descriptor() ([]byte, []int) {
	return file_chorus_chorus_proto_rawDescGZIP(), []int{32}
}

func (x *ListSwitchResponse) GetSwitches() []*GetBucketSwitchStatusResponse {
	if x != nil {
		return x.Switches
	}
	return nil
}

var File_chorus_chorus_proto protoreflect.FileDescriptor

var file_chorus_chorus_proto_rawDesc = []byte{
	0x0a, 0x13, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65,
	0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x57, 0x0a, 0x0f, 0x4d,
	0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x18,
	0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x07, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x22, 0x50, 0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72,
	0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xc5, 0x01, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x0e, 0x0a, 0x02, 0x69,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x35, 0x0a, 0x09, 0x6c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17,
	0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4c,
	0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x06, 0x71, 0x75, 0x65, 0x75, 0x65, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x6f,
	0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x63,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x72, 0x65, 0x61, 0x64,
	0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x72, 0x65, 0x61, 0x64, 0x79, 0x12, 0x1e,
	0x0a, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x0a, 0x63, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x51,
	0x0a, 0x1d, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63,
	0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x30, 0x0a, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74,
	0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x06, 0x63, 0x68, 0x65, 0x63, 0x6b,
	0x73, 0x22, 0x59, 0x0a, 0x20, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x53, 0x0a, 0x21,
	0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x05, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x05, 0x63, 0x68, 0x65, 0x63,
	0x6b, 0x22, 0x65, 0x0a, 0x1b, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x79,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x6f, 0x62, 0x6a, 0x65, 0x63, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x65, 0x74, 0x61, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x65, 0x74, 0x61, 0x67, 0x12, 0x1a, 0x0a, 0x08,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08,
	0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x22, 0x94, 0x01, 0x0a, 0x27, 0x47, 0x65, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x35, 0x0a, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x4d, 0x69, 0x67, 0x72, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x52, 0x09, 0x6c, 0x6f, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x03, 0x52, 0x08, 0x50, 0x61, 0x67, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x22,
	0x81, 0x01, 0x0a, 0x28, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x07,
	0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74,
	0x72, 0x79, 0x52, 0x07, 0x65, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x43,
	0x75, 0x72, 0x73, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x43, 0x75, 0x72,
	0x73, 0x6f, 0x72, 0x22, 0x5d, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07,
	0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x63, 0x6f, 0x6d, 0x6d, 0x69, 0x74, 0x12, 0x12,
	0x0a, 0x04, 0x64, 0x61, 0x74, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x64, 0x61,
	0x74, 0x65, 0x22, 0x42, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2b, 0x0a, 0x08, 0x73, 0x74, 0x6f,
	0x72, 0x61, 0x67, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x63, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x52, 0x08, 0x73, 0x74,
	0x6f, 0x72, 0x61, 0x67, 0x65, 0x73, 0x22, 0xa9, 0x02, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4d, 0x61, 0x69, 0x6e, 0x12,
	0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a, 0x08, 0x70, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x63, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x2e, 0x50, 0x72, 0x6f,
	0x76, 0x69, 0x64, 0x65, 0x72, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x12,
	0x34, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x72,
	0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e,
	0x74, 0x69, 0x61, 0x6c, 0x73, 0x22, 0x6b, 0x0a, 0x08, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65,
	0x72, 0x12, 0x09, 0x0a, 0x05, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04,
	0x43, 0x65, 0x70, 0x68, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x4d, 0x69, 0x6e, 0x69, 0x6f, 0x10,
	0x02, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x57, 0x53, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x47, 0x43,
	0x53, 0x10, 0x04, 0x12, 0x0b, 0x0a, 0x07, 0x41, 0x6c, 0x69, 0x62, 0x61, 0x62, 0x61, 0x10, 0x05,
	0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x66, 0x6c, 0x61, 0x72, 0x65, 0x10, 0x06,
	0x12, 0x10, 0x0a, 0x0c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x61, 0x6c, 0x4f, 0x63, 0x65, 0x61, 0x6e,
	0x10, 0x07, 0x22, 0x60, 0x0a, 0x0a, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c,
	0x12, 0x14, 0x0a, 0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x05, 0x61, 0x6c, 0x69, 0x61, 0x73, 0x12, 0x1d, 0x0a, 0x0a, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x61, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x4b, 0x65, 0x79, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65, 0x63, 0x72, 0x65,
	0x74, 0x4b, 0x65, 0x79, 0x22, 0x6d, 0x0a, 0x1b, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79,
	0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x34, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x12, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x72, 0x65, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x52, 0x0b, 0x63, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69,
	0x61, 0x6c, 0x73, 0x22, 0xf6, 0x01, 0x0a, 0x15, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12,
	0x2b, 0x0a, 0x12, 0x69, 0x73, 0x5f, 0x66, 0x6f, 0x72, 0x5f, 0x61, 0x6c, 0x6c, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x69, 0x73, 0x46,
	0x6f, 0x72, 0x41, 0x6c, 0x6c, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x20, 0x0a, 0x09,
	0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x48,
	0x00, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20,
	0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x09, 0x48, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01,
	0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c,
	0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0xf4, 0x01, 0x0a,
	0x1b, 0x41, 0x64, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x21, 0x0a, 0x0c, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x66, 0x72, 0x6f, 0x6d, 0x5f, 0x62, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x66, 0x72, 0x6f, 0x6d, 0x42, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x12, 0x1d, 0x0a, 0x0a, 0x74, 0x6f, 0x5f, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x74, 0x6f, 0x53, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a, 0x09, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75,
	0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x01, 0x52, 0x08, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x5f, 0x62,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f,
	0x75, 0x72, 0x6c, 0x22, 0x83, 0x01, 0x0a, 0x20, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04,
	0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f,
	0x12, 0x27, 0x0a, 0x0f, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0e, 0x73, 0x68, 0x6f, 0x77, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x22, 0x6c, 0x0a, 0x21, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x07, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x12, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x03, 0x28, 0x09, 0x52, 0x11, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x65, 0x64,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x22, 0x53, 0x0a, 0x18, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x37, 0x0a, 0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xd7, 0x06, 0x0a,
	0x0b, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a, 0x04,
	0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72,
	0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02,
	0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x39, 0x0a, 0x0a,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x1b, 0x0a, 0x09, 0x69, 0x73, 0x5f, 0x70, 0x61,
	0x75, 0x73, 0x65, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x69, 0x73, 0x50, 0x61,
	0x75, 0x73, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0c, 0x69, 0x73, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f,
	0x64, 0x6f, 0x6e, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x69, 0x73, 0x49, 0x6e,
	0x69, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x26, 0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6f,
	0x62, 0x6a, 0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x03, 0x52,
	0x0d, 0x69, 0x6e, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x22,
	0x0a, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x6f, 0x62, 0x6a, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0b, 0x69, 0x6e, 0x69, 0x74, 0x4f, 0x62, 0x6a, 0x44, 0x6f,
	0x6e, 0x65, 0x12, 0x2a, 0x0a, 0x11, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73,
	0x5f, 0x6c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0f, 0x69,
	0x6e, 0x69, 0x74, 0x42, 0x79, 0x74, 0x65, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x65, 0x64, 0x12, 0x26,
	0x0a, 0x0f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x62, 0x79, 0x74, 0x65, 0x73, 0x5f, 0x64, 0x6f, 0x6e,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x03, 0x52, 0x0d, 0x69, 0x6e, 0x69, 0x74, 0x42, 0x79, 0x74,
	0x65, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73,
	0x18, 0x0c, 0x20, 0x01, 0x28, 0x03, 0x52, 0x06, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x1f,
	0x0a, 0x0b, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x0a, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x44, 0x6f, 0x6e, 0x65, 0x12,
	0x42, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x65, 0x6d, 0x69, 0x74, 0x74, 0x65, 0x64, 0x5f,
	0x61, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74, 0x45, 0x6d, 0x69, 0x74, 0x74, 0x65,
	0x64, 0x41, 0x74, 0x12, 0x46, 0x0a, 0x11, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x70, 0x72, 0x6f, 0x63,
	0x65, 0x73, 0x73, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0f, 0x6c, 0x61, 0x73, 0x74,
	0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x65, 0x64, 0x41, 0x74, 0x12, 0x20, 0x0a, 0x09, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00,
	0x52, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x55, 0x72, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x11, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x01, 0x52, 0x08, 0x74, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x12,
	0x3c, 0x0a, 0x0c, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x18,
	0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x52, 0x0a, 0x69, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x41, 0x74, 0x12, 0x1d, 0x0a,
	0x0a, 0x68, 0x61, 0x73, 0x5f, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x68, 0x61, 0x73, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x12, 0x1f, 0x0a, 0x0b,
	0x69, 0x73, 0x5f, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x18, 0x14, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0a, 0x69, 0x73, 0x41, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x12, 0x3b, 0x0a,
	0x0b, 0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x0a,
	0x61, 0x72, 0x63, 0x68, 0x69, 0x76, 0x65, 0x64, 0x41, 0x74, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x61,
	0x67, 0x65, 0x6e, 0x74, 0x5f, 0x75, 0x72, 0x6c, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x5f,
	0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x94, 0x01, 0x0a, 0x12, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f,
	0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a,
	0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x20, 0x0a,
	0x09, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09,
	0x48, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42,
	0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x22, 0x5b, 0x0a,
	0x1c, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3b, 0x0a,
	0x0c, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x01, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0x49, 0x0a, 0x0f, 0x55, 0x73,
	0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x12, 0x0a,
	0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65,
	0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x22, 0x94, 0x01, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72,
	0x6f, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e,
	0x0a, 0x02, 0x74, 0x6f, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x3c,
	0x0a, 0x1a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x18, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x22, 0xb5, 0x01, 0x0a,
	0x14, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x75, 0x73, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x04, 0x75, 0x73, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x66, 0x72, 0x6f, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x6f, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x02, 0x74, 0x6f, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x68, 0x6f, 0x77, 0x5f, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x73, 0x68, 0x6f, 0x77, 0x4d,
	0x61, 0x74, 0x63, 0x68, 0x12, 0x20, 0x0a, 0x09, 0x74, 0x6f, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x08, 0x74, 0x6f, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x88, 0x01, 0x01, 0x42, 0x0c, 0x0a, 0x0a, 0x5f, 0x74, 0x6f, 0x5f, 0x62, 0x75,
	0x63, 0x6b, 0x65, 0x74, 0x22, 0xac, 0x01, 0x0a, 0x15, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65,
	0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x19,
	0x0a, 0x08, 0x69, 0x73, 0x5f, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x07, 0x69, 0x73, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x12, 0x1b, 0x0a, 0x09, 0x6d, 0x69, 0x73,
	0x73, 0x5f, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x08, 0x6d, 0x69,
	0x73, 0x73, 0x46, 0x72, 0x6f, 0x6d, 0x12, 0x17, 0x0a, 0x07, 0x6d, 0x69, 0x73, 0x73, 0x5f, 0x74,
	0x6f, 0x18, 0x03, 0x20, 0x03, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x69, 0x73, 0x73, 0x54, 0x6f, 0x12,
	0x16, 0x0a, 0x06, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x18, 0x04, 0x20, 0x03, 0x28, 0x09, 0x52,
	0x06, 0x64, 0x69, 0x66, 0x66, 0x65, 0x72, 0x12, 0x14, 0x0a, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x14, 0x0a,
	0x05, 0x6d, 0x61, 0x74, 0x63, 0x68, 0x18, 0x06, 0x20, 0x03, 0x28, 0x09, 0x52, 0x05, 0x6d, 0x61,
	0x74, 0x63, 0x68, 0x22, 0x3a, 0x0a, 0x11, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x25, 0x0a, 0x06, 0x61, 0x67, 0x65, 0x6e,
	0x74, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x52, 0x06, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x22,
	0x33, 0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x74, 0x6f, 0x72,
	0x61, 0x67, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x73, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x22, 0xbb, 0x01, 0x0a, 0x1f, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42,
	0x75, 0x63, 0x6b, 0x65, 0x74, 0x5a, 0x65, 0x72, 0x6f, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d,
	0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x43, 0x0a, 0x0d, 0x6d,
	0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52,
	0x0c, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x54, 0x74, 0x6c, 0x88, 0x01, 0x01,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74,
	0x74, 0x6c, 0x22, 0xb0, 0x01, 0x0a, 0x13, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x52, 0x0d,
	0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x44, 0x0a,
	0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x73,
	0x48, 0x00, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65,
	0x5f, 0x6f, 0x70, 0x74, 0x73, 0x22, 0x9a, 0x03, 0x0a, 0x12, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68,
	0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x73, 0x12, 0x2b, 0x0a, 0x12,
	0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x6f, 0x6e, 0x5f, 0x69, 0x6e, 0x69, 0x74, 0x5f, 0x64, 0x6f,
	0x6e, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x4f,
	0x6e, 0x49, 0x6e, 0x69, 0x74, 0x44, 0x6f, 0x6e, 0x65, 0x12, 0x17, 0x0a, 0x04, 0x63, 0x72, 0x6f,
	0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x48, 0x00, 0x52, 0x04, 0x63, 0x72, 0x6f, 0x6e, 0x88,
	0x01, 0x01, 0x12, 0x3a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70,
	0x48, 0x01, 0x52, 0x07, 0x73, 0x74, 0x61, 0x72, 0x74, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x41,
	0x0a, 0x0c, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48,
	0x02, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x88, 0x01,
	0x01, 0x12, 0x27, 0x0a, 0x0d, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x48, 0x03, 0x52, 0x0b, 0x6d, 0x61, 0x78, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x67, 0x88, 0x01, 0x01, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x6b,
	0x69, 0x70, 0x5f, 0x62, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5f, 0x63, 0x68, 0x65, 0x63, 0x6b, 0x18,
	0x06, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x73, 0x6b, 0x69, 0x70, 0x42, 0x75, 0x63, 0x6b, 0x65,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x31, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e,
	0x75, 0x65, 0x5f, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x13, 0x63, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x75, 0x65, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x42, 0x07, 0x0a, 0x05, 0x5f, 0x63, 0x72,
	0x6f, 0x6e, 0x42, 0x0b, 0x0a, 0x09, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x61, 0x74, 0x42,
	0x0f, 0x0a, 0x0d, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x5f, 0x6c,
	0x61, 0x67, 0x22, 0xa3, 0x05, 0x0a, 0x1d, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4d, 0x0a, 0x0b, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x63, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x2e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0a, 0x6c, 0x61, 0x73, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x23, 0x0a, 0x0d, 0x7a, 0x65, 0x72, 0x6f, 0x5f, 0x64, 0x6f, 0x77, 0x6e,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x7a, 0x65, 0x72, 0x6f,
	0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0d, 0x6d, 0x75, 0x6c, 0x74,
	0x69, 0x70, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x48, 0x00, 0x52, 0x0c, 0x6d, 0x75,
	0x6c, 0x74, 0x69, 0x70, 0x61, 0x72, 0x74, 0x54, 0x74, 0x6c, 0x88, 0x01, 0x01, 0x12, 0x44, 0x0a,
	0x0d, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x73,
	0x48, 0x01, 0x52, 0x0c, 0x64, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x4f, 0x70, 0x74, 0x73,
	0x88, 0x01, 0x01, 0x12, 0x47, 0x0a, 0x0f, 0x6c, 0x61, 0x73, 0x74, 0x5f, 0x73, 0x74, 0x61, 0x72,
	0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x02, 0x52, 0x0d, 0x6c, 0x61, 0x73, 0x74,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x38, 0x0a, 0x07,
	0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x48, 0x03, 0x52, 0x06, 0x64, 0x6f, 0x6e,
	0x65, 0x41, 0x74, 0x88, 0x01, 0x01, 0x12, 0x18, 0x0a, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72,
	0x79, 0x18, 0x07, 0x20, 0x03, 0x28, 0x09, 0x52, 0x07, 0x68, 0x69, 0x73, 0x74, 0x6f, 0x72, 0x79,
	0x12, 0x41, 0x0a, 0x0e, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75,
	0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x52, 0x0d, 0x72, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x49, 0x64, 0x22, 0x5f, 0x0a, 0x06, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a,
	0x0a, 0x4e, 0x6f, 0x74, 0x53, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x10, 0x00, 0x12, 0x0e, 0x0a,
	0x0a, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73, 0x10, 0x01, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x49, 0x6e, 0x50, 0x72, 0x6f, 0x67, 0x72, 0x65, 0x73, 0x73,
	0x10, 0x02, 0x12, 0x09, 0x0a, 0x05, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x10, 0x03, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x6b, 0x69, 0x70, 0x70, 0x65, 0x64, 0x10, 0x04, 0x12, 0x08, 0x0a, 0x04, 0x44, 0x6f,
	0x6e, 0x65, 0x10, 0x05, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x6d, 0x75, 0x6c, 0x74, 0x69, 0x70, 0x61,
	0x72, 0x74, 0x5f, 0x74, 0x74, 0x6c, 0x42, 0x10, 0x0a, 0x0e, 0x5f, 0x64, 0x6f, 0x77, 0x6e, 0x74,
	0x69, 0x6d, 0x65, 0x5f, 0x6f, 0x70, 0x74, 0x73, 0x42, 0x12, 0x0a, 0x10, 0x5f, 0x6c, 0x61, 0x73,
	0x74, 0x5f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x5f, 0x61, 0x74, 0x42, 0x0a, 0x0a, 0x08,
	0x5f, 0x64, 0x6f, 0x6e, 0x65, 0x5f, 0x61, 0x74, 0x22, 0x57, 0x0a, 0x12, 0x4c, 0x69, 0x73, 0x74,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x41,
	0x0a, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x25, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x52, 0x08, 0x73, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65,
	0x73, 0x32, 0xf7, 0x10, 0x0a, 0x06, 0x43, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x12, 0x46, 0x0a, 0x0d,
	0x47, 0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47,
	0x65, 0x74, 0x41, 0x70, 0x70, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61,
	0x67, 0x65, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x63, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x53, 0x74, 0x6f, 0x72, 0x61, 0x67, 0x65, 0x73,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x52, 0x0a, 0x13, 0x47, 0x65, 0x74, 0x50,
	0x72, 0x6f, 0x78, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x61, 0x6c, 0x73, 0x12,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x23, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x47, 0x65, 0x74, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x43, 0x72, 0x65, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x61, 0x6c, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x70, 0x0a, 0x19,
	0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65,
	0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x28, 0x2e, 0x63, 0x68, 0x6f, 0x72,
	0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x73, 0x46, 0x6f, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x47,
	0x0a, 0x0e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x12, 0x1d, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x41, 0x64, 0x64, 0x52, 0x65, 0x70,
	0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x4c, 0x0a, 0x10, 0x4c, 0x69, 0x73, 0x74, 0x52,
	0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x1a, 0x20, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73,
	0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x54, 0x0a, 0x14, 0x4c, 0x69, 0x73, 0x74, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x24, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x4c, 0x0a, 0x17, 0x53,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x30, 0x01, 0x12, 0x46, 0x0a, 0x10, 0x50, 0x61, 0x75,
	0x73, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e,
	0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x12, 0x47, 0x0a, 0x11, 0x52, 0x65, 0x73, 0x75, 0x6d, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x47, 0x0a, 0x11, 0x44, 0x65,
	0x6c, 0x65, 0x74, 0x65, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d,
	0x70, 0x74, 0x79, 0x12, 0x55, 0x0a, 0x15, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x24, 0x2e, 0x63,
	0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x55, 0x73, 0x65, 0x72,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5b, 0x0a, 0x18, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5a, 0x65, 0x72, 0x6f, 0x44, 0x6f,
	0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x27, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x5a, 0x65, 0x72, 0x6f,
	0x44, 0x6f, 0x77, 0x6e, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x43, 0x0a, 0x0c, 0x53, 0x77, 0x69, 0x74, 0x63,
	0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x12, 0x1b, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x48, 0x0a, 0x12,
	0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74,
	0x63, 0x68, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x5a, 0x0a, 0x15, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63,
	0x6b, 0x65, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x25, 0x2e, 0x63, 0x68,
	0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x53, 0x77,
	0x69, 0x74, 0x63, 0x68, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x4d, 0x0a, 0x17, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x65, 0x73, 0x12, 0x16, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x4c,
	0x69, 0x73, 0x74, 0x53, 0x77, 0x69, 0x74, 0x63, 0x68, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x4c, 0x0a, 0x0d, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72, 0x65, 0x42, 0x75, 0x63, 0x6b,
	0x65, 0x74, 0x12, 0x1c, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70,
	0x61, 0x72, 0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x1d, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6d, 0x70, 0x61, 0x72,
	0x65, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x3e, 0x0a, 0x09, 0x47, 0x65, 0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x1a, 0x19, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65,
	0x74, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x53, 0x0a, 0x14, 0x41, 0x64, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x23, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73,
	0x2e, 0x41, 0x64, 0x64, 0x42, 0x75, 0x63, 0x6b, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69, 0x63,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6d, 0x70, 0x74, 0x79, 0x12, 0x41, 0x0a, 0x0e, 0x47, 0x65, 0x74, 0x52, 0x65, 0x70, 0x6c, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x1a, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e,
	0x52, 0x65, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x1a, 0x13, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x52, 0x65, 0x70, 0x6c,
	0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x15, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x12, 0x1f, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x12, 0x56, 0x0a, 0x15, 0x4c, 0x69, 0x73,
	0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x73, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x25, 0x2e, 0x63, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x67, 0x0a, 0x19, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x1f,
	0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65,
	0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x29, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x85, 0x01, 0x0a, 0x20, 0x47,
	0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x12,
	0x2f, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x30, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x47, 0x65, 0x74, 0x43, 0x6f, 0x6e,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70,
	0x6f, 0x72, 0x74, 0x45, 0x6e, 0x74, 0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x57, 0x0a, 0x1c, 0x44, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x70, 0x6f,
	0x72, 0x74, 0x12, 0x1f, 0x2e, 0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2e, 0x43, 0x6f, 0x6e, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x63, 0x79, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x29, 0x5a, 0x27, 0x67,
	0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x63, 0x6c, 0x79, 0x73, 0x6f, 0x2f,
	0x63, 0x68, 0x6f, 0x72, 0x75, 0x73, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x68, 0x6f,
	0x72, 0x75, 0x73, 0x3b, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_chorus_chorus_proto_rawDescOnce sync.Once
	file_chorus_chorus_proto_rawDescData = file_chorus_chorus_proto_rawDesc
)

func file_chorus_chorus_proto_rawDescGZIP() []byte {
	file_chorus_chorus_proto_rawDescOnce.Do(func() {
		file_chorus_chorus_proto_rawDescData = protoimpl.X.CompressGZIP(file_chorus_chorus_proto_rawDescData)
	})
	return file_chorus_chorus_proto_rawDescData
}

var file_chorus_chorus_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_chorus_chorus_proto_msgTypes = make([]protoimpl.MessageInfo, 33)
var file_chorus_chorus_proto_goTypes = []any{
	(Storage_Provider)(0),                            // 0: chorus.Storage.Provider
	(GetBucketSwitchStatusResponse_Status)(0),        // 1: chorus.GetBucketSwitchStatusResponse.Status
	(*MigrateLocation)(nil),                          // 2: chorus.MigrateLocation
	(*ConsistencyCheckRequest)(nil),                  // 3: chorus.ConsistencyCheckRequest
	(*ConsistencyCheck)(nil),                         // 4: chorus.ConsistencyCheck
	(*ListConsistencyChecksResponse)(nil),            // 5: chorus.ListConsistencyChecksResponse
	(*GetConsistencyCheckReportRequest)(nil),         // 6: chorus.GetConsistencyCheckReportRequest
	(*GetConsistencyCheckReportResponse)(nil),        // 7: chorus.GetConsistencyCheckReportResponse
	(*ConsistencyCheckReportEntry)(nil),              // 8: chorus.ConsistencyCheckReportEntry
	(*GetConsistencyCheckReportEntriesRequest)(nil),  // 9: chorus.GetConsistencyCheckReportEntriesRequest
	(*GetConsistencyCheckReportEntriesResponse)(nil), // 10: chorus.GetConsistencyCheckReportEntriesResponse
	(*GetAppVersionResponse)(nil),                    // 11: chorus.GetAppVersionResponse
	(*GetStoragesResponse)(nil),                      // 12: chorus.GetStoragesResponse
	(*Storage)(nil),                                  // 13: chorus.Storage
	(*Credential)(nil),                               // 14: chorus.Credential
	(*GetProxyCredentialsResponse)(nil),              // 15: chorus.GetProxyCredentialsResponse
	(*AddReplicationRequest)(nil),                    // 16: chorus.AddReplicationRequest
	(*AddBucketReplicationRequest)(nil),              // 17: chorus.AddBucketReplicationRequest
	(*ListBucketsForReplicationRequest)(nil),         // 18: chorus.ListBucketsForReplicationRequest
	(*ListBucketsForReplicationResponse)(nil),        // 19: chorus.ListBucketsForReplicationResponse
	(*ListReplicationsResponse)(nil),                 // 20: chorus.ListReplicationsResponse
	(*Replication)(nil),                              // 21: chorus.Replication
	(*ReplicationRequest)(nil),                       // 22: chorus.ReplicationRequest
	(*ListUserReplicationsResponse)(nil),             // 23: chorus.ListUserReplicationsResponse
	(*UserReplication)(nil),                          // 24: chorus.UserReplication
	(*DeleteUserReplicationRequest)(nil),             // 25: chorus.DeleteUserReplicationRequest
	(*CompareBucketRequest)(nil),                     // 26: chorus.CompareBucketRequest
	(*CompareBucketResponse)(nil),                    // 27: chorus.CompareBucketResponse
	(*GetAgentsResponse)(nil),                        // 28: chorus.GetAgentsResponse
	(*Agent)(nil),                                    // 29: chorus.Agent
	(*SwitchBucketZeroDowntimeRequest)(nil),          // 30: chorus.SwitchBucketZeroDowntimeRequest
	(*SwitchBucketRequest)(nil),                      // 31: chorus.SwitchBucketRequest
	(*SwitchDowntimeOpts)(nil),                       // 32: chorus.SwitchDowntimeOpts
	(*GetBucketSwitchStatusResponse)(nil),            // 33: chorus.GetBucketSwitchStatusResponse
	(*ListSwitchResponse)(nil),                       // 34: chorus.ListSwitchResponse
	(*timestamppb.Timestamp)(nil),                    // 35: google.protobuf.Timestamp
	(*durationpb.Duration)(nil),                      // 36: google.protobuf.Duration
	(*emptypb.Empty)(nil),                            // 37: google.protobuf.Empty
}
var file_chorus_chorus_proto_depIdxs = []int32{
	2,  // 0: chorus.ConsistencyCheckRequest.locations:type_name -> chorus.MigrateLocation
	2,  // 1: chorus.ConsistencyCheck.locations:type_name -> chorus.MigrateLocation
	4,  // 2: chorus.ListConsistencyChecksResponse.checks:type_name -> chorus.ConsistencyCheck
	2,  // 3: chorus.GetConsistencyCheckReportRequest.locations:type_name -> chorus.MigrateLocation
	4,  // 4: chorus.GetConsistencyCheckReportResponse.check:type_name -> chorus.ConsistencyCheck
	2,  // 5: chorus.GetConsistencyCheckReportEntriesRequest.locations:type_name -> chorus.MigrateLocation
	8,  // 6: chorus.GetConsistencyCheckReportEntriesResponse.entries:type_name -> chorus.ConsistencyCheckReportEntry
	13, // 7: chorus.GetStoragesResponse.storages:type_name -> chorus.Storage
	0,  // 8: chorus.Storage.provider:type_name -> chorus.Storage.Provider
	14, // 9: chorus.Storage.credentials:type_name -> chorus.Credential
	14, // 10: chorus.GetProxyCredentialsResponse.credentials:type_name -> chorus.Credential
	21, // 11: chorus.ListReplicationsResponse.replications:type_name -> chorus.Replication
	35, // 12: chorus.Replication.created_at:type_name -> google.protobuf.Timestamp
	35, // 13: chorus.Replication.last_emitted_at:type_name -> google.protobuf.Timestamp
	35, // 14: chorus.Replication.last_processed_at:type_name -> google.protobuf.Timestamp
	35, // 15: chorus.Replication.init_done_at:type_name -> google.protobuf.Timestamp
	35, // 16: chorus.Replication.archived_at:type_name -> google.protobuf.Timestamp
	24, // 17: chorus.ListUserReplicationsResponse.replications:type_name -> chorus.UserReplication
	29, // 18: chorus.GetAgentsResponse.agents:type_name -> chorus.Agent
	22, // 19: chorus.SwitchBucketZeroDowntimeRequest.replication_id:type_name -> chorus.ReplicationRequest
	36, // 20: chorus.SwitchBucketZeroDowntimeRequest.multipart_ttl:type_name -> google.protobuf.Duration
	22, // 21: chorus.SwitchBucketRequest.replication_id:type_name -> chorus.ReplicationRequest
	32, // 22: chorus.SwitchBucketRequest.downtime_opts:type_name -> chorus.SwitchDowntimeOpts
	35, // 23: chorus.SwitchDowntimeOpts.start_at:type_name -> google.protobuf.Timestamp
	36, // 24: chorus.SwitchDowntimeOpts.max_duration:type_name -> google.protobuf.Duration
	1,  // 25: chorus.GetBucketSwitchStatusResponse.last_status:type_name -> chorus.GetBucketSwitchStatusResponse.Status
	36, // 26: chorus.GetBucketSwitchStatusResponse.multipart_ttl:type_name -> google.protobuf.Duration
	32, // 27: chorus.GetBucketSwitchStatusResponse.downtime_opts:type_name -> chorus.SwitchDowntimeOpts
	35, // 28: chorus.GetBucketSwitchStatusResponse.last_started_at:type_name -> google.protobuf.Timestamp
	35, // 29: chorus.GetBucketSwitchStatusResponse.done_at:type_name -> google.protobuf.Timestamp
	22, // 30: chorus.GetBucketSwitchStatusResponse.replication_id:type_name -> chorus.ReplicationRequest
	33, // 31: chorus.ListSwitchResponse.switches:type_name -> chorus.GetBucketSwitchStatusResponse
	37, // 32: chorus.Chorus.GetAppVersion:input_type -> google.protobuf.Empty
	37, // 33: chorus.Chorus.GetStorages:input_type -> google.protobuf.Empty
	37, // 34: chorus.Chorus.GetProxyCredentials:input_type -> google.protobuf.Empty
	18, // 35: chorus.Chorus.ListBucketsForReplication:input_type -> chorus.ListBucketsForReplicationRequest
	16, // 36: chorus.Chorus.AddReplication:input_type -> chorus.AddReplicationRequest
	37, // 37: chorus.Chorus.ListReplications:input_type -> google.protobuf.Empty
	37, // 38: chorus.Chorus.ListUserReplications:input_type -> google.protobuf.Empty
	22, // 39: chorus.Chorus.StreamBucketReplication:input_type -> chorus.ReplicationRequest
	22, // 40: chorus.Chorus.PauseReplication:input_type -> chorus.ReplicationRequest
	22, // 41: chorus.Chorus.ResumeReplication:input_type -> chorus.ReplicationRequest
	22, // 42: chorus.Chorus.DeleteReplication:input_type -> chorus.ReplicationRequest
	25, // 43: chorus.Chorus.DeleteUserReplication:input_type -> chorus.DeleteUserReplicationRequest
	30, // 44: chorus.Chorus.SwitchBucketZeroDowntime:input_type -> chorus.SwitchBucketZeroDowntimeRequest
	31, // 45: chorus.Chorus.SwitchBucket:input_type -> chorus.SwitchBucketRequest
	22, // 46: chorus.Chorus.DeleteBucketSwitch:input_type -> chorus.ReplicationRequest
	22, // 47: chorus.Chorus.GetBucketSwitchStatus:input_type -> chorus.ReplicationRequest
	37, // 48: chorus.Chorus.ListReplicationSwitches:input_type -> google.protobuf.Empty
	26, // 49: chorus.Chorus.CompareBucket:input_type -> chorus.CompareBucketRequest
	37, // 50: chorus.Chorus.GetAgents:input_type -> google.protobuf.Empty
	17, // 51: chorus.Chorus.AddBucketReplication:input_type -> chorus.AddBucketReplicationRequest
	22, // 52: chorus.Chorus.GetReplication:input_type -> chorus.ReplicationRequest
	3,  // 53: chorus.Chorus.StartConsistencyCheck:input_type -> chorus.ConsistencyCheckRequest
	37, // 54: chorus.Chorus.ListConsistencyChecks:input_type -> google.protobuf.Empty
	3,  // 55: chorus.Chorus.GetConsistencyCheckReport:input_type -> chorus.ConsistencyCheckRequest
	9,  // 56: chorus.Chorus.GetConsistencyCheckReportEntries:input_type -> chorus.GetConsistencyCheckReportEntriesRequest
	3,  // 57: chorus.Chorus.DeleteConsistencyCheckReport:input_type -> chorus.ConsistencyCheckRequest
	11, // 58: chorus.Chorus.GetAppVersion:output_type -> chorus.GetAppVersionResponse
	12, // 59: chorus.Chorus.GetStorages:output_type -> chorus.GetStoragesResponse
	15, // 60: chorus.Chorus.GetProxyCredentials:output_type -> chorus.GetProxyCredentialsResponse
	19, // 61: chorus.Chorus.ListBucketsForReplication:output_type -> chorus.ListBucketsForReplicationResponse
	37, // 62: chorus.Chorus.AddReplication:output_type -> google.protobuf.Empty
	20, // 63: chorus.Chorus.ListReplications:output_type -> chorus.ListReplicationsResponse
	23, // 64: chorus.Chorus.ListUserReplications:output_type -> chorus.ListUserReplicationsResponse
	21, // 65: chorus.Chorus.StreamBucketReplication:output_type -> chorus.Replication
	37, // 66: chorus.Chorus.PauseReplication:output_type -> google.protobuf.Empty
	37, // 67: chorus.Chorus.ResumeReplication:output_type -> google.protobuf.Empty
	37, // 68: chorus.Chorus.DeleteReplication:output_type -> google.protobuf.Empty
	37, // 69: chorus.Chorus.DeleteUserReplication:output_type -> google.protobuf.Empty
	37, // 70: chorus.Chorus.SwitchBucketZeroDowntime:output_type -> google.protobuf.Empty
	37, // 71: chorus.Chorus.SwitchBucket:output_type -> google.protobuf.Empty
	37, // 72: chorus.Chorus.DeleteBucketSwitch:output_type -> google.protobuf.Empty
	33, // 73: chorus.Chorus.GetBucketSwitchStatus:output_type -> chorus.GetBucketSwitchStatusResponse
	34, // 74: chorus.Chorus.ListReplicationSwitches:output_type -> chorus.ListSwitchResponse
	27, // 75: chorus.Chorus.CompareBucket:output_type -> chorus.CompareBucketResponse
	28, // 76: chorus.Chorus.GetAgents:output_type -> chorus.GetAgentsResponse
	37, // 77: chorus.Chorus.AddBucketReplication:output_type -> google.protobuf.Empty
	21, // 78: chorus.Chorus.GetReplication:output_type -> chorus.Replication
	37, // 79: chorus.Chorus.StartConsistencyCheck:output_type -> google.protobuf.Empty
	5,  // 80: chorus.Chorus.ListConsistencyChecks:output_type -> chorus.ListConsistencyChecksResponse
	7,  // 81: chorus.Chorus.GetConsistencyCheckReport:output_type -> chorus.GetConsistencyCheckReportResponse
	10, // 82: chorus.Chorus.GetConsistencyCheckReportEntries:output_type -> chorus.GetConsistencyCheckReportEntriesResponse
	37, // 83: chorus.Chorus.DeleteConsistencyCheckReport:output_type -> google.protobuf.Empty
	58, // [58:84] is the sub-list for method output_type
	32, // [32:58] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_chorus_chorus_proto_init() }
func file_chorus_chorus_proto_init() {
	if File_chorus_chorus_proto != nil {
		return
	}
	file_chorus_chorus_proto_msgTypes[14].OneofWrappers = []any{}
	file_chorus_chorus_proto_msgTypes[15].OneofWrappers = []any{}
	file_chorus_chorus_proto_msgTypes[19].OneofWrappers = []any{}
	file_chorus_chorus_proto_msgTypes[20].OneofWrappers = []any{}
	file_chorus_chorus_proto_msgTypes[24].OneofWrappers = []any{}
	file_chorus_chorus_proto_msgTypes[28].OneofWrappers = []any{}
	file_chorus_chorus_proto_msgTypes[29].OneofWrappers = []any{}
	file_chorus_chorus_proto_msgTypes[30].OneofWrappers = []any{}
	file_chorus_chorus_proto_msgTypes[31].OneofWrappers = []any{}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_chorus_chorus_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   33,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_chorus_chorus_proto_goTypes,
		DependencyIndexes: file_chorus_chorus_proto_depIdxs,
		EnumInfos:         file_chorus_chorus_proto_enumTypes,
		MessageInfos:      file_chorus_chorus_proto_msgTypes,
	}.Build()
	File_chorus_chorus_proto = out.File
	file_chorus_chorus_proto_rawDesc = nil
	file_chorus_chorus_proto_goTypes = nil
	file_chorus_chorus_proto_depIdxs = nil
}
